// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: wordhelper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 分词
type FenciJiebaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str  string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FenciJiebaReq) Reset() {
	*x = FenciJiebaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FenciJiebaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenciJiebaReq) ProtoMessage() {}

func (x *FenciJiebaReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenciJiebaReq.ProtoReflect.Descriptor instead.
func (*FenciJiebaReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{0}
}

func (x *FenciJiebaReq) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *FenciJiebaReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type FenciJiebaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FenciJiebaResp) Reset() {
	*x = FenciJiebaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FenciJiebaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenciJiebaResp) ProtoMessage() {}

func (x *FenciJiebaResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenciJiebaResp.ProtoReflect.Descriptor instead.
func (*FenciJiebaResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{1}
}

func (x *FenciJiebaResp) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

// ocr 识别
type OCRReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *OCRReq) Reset() {
	*x = OCRReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRReq) ProtoMessage() {}

func (x *OCRReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRReq.ProtoReflect.Descriptor instead.
func (*OCRReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{2}
}

func (x *OCRReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *OCRReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type OCRResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OCRResp) Reset() {
	*x = OCRResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRResp) ProtoMessage() {}

func (x *OCRResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRResp.ProtoReflect.Descriptor instead.
func (*OCRResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{3}
}

func (x *OCRResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ocr languages
type OCRLangReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OCRLangReq) Reset() {
	*x = OCRLangReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRLangReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRLangReq) ProtoMessage() {}

func (x *OCRLangReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRLangReq.ProtoReflect.Descriptor instead.
func (*OCRLangReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{4}
}

type OCRLangResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OCRLangResp) Reset() {
	*x = OCRLangResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRLangResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRLangResp) ProtoMessage() {}

func (x *OCRLangResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRLangResp.ProtoReflect.Descriptor instead.
func (*OCRLangResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{5}
}

func (x *OCRLangResp) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

// ocr version
type OCRVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OCRVersionReq) Reset() {
	*x = OCRVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRVersionReq) ProtoMessage() {}

func (x *OCRVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRVersionReq.ProtoReflect.Descriptor instead.
func (*OCRVersionReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{6}
}

type OCRVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OCRVersionResp) Reset() {
	*x = OCRVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRVersionResp) ProtoMessage() {}

func (x *OCRVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRVersionResp.ProtoReflect.Descriptor instead.
func (*OCRVersionResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{7}
}

func (x *OCRVersionResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ocr base64图片识别
type OCRBase64Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base64Img string `protobuf:"bytes,1,opt,name=base64img,proto3" json:"base64img,omitempty"`
	Lang      string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *OCRBase64Req) Reset() {
	*x = OCRBase64Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRBase64Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRBase64Req) ProtoMessage() {}

func (x *OCRBase64Req) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRBase64Req.ProtoReflect.Descriptor instead.
func (*OCRBase64Req) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{8}
}

func (x *OCRBase64Req) GetBase64Img() string {
	if x != nil {
		return x.Base64Img
	}
	return ""
}

func (x *OCRBase64Req) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type OCRBase64Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OCRBase64Resp) Reset() {
	*x = OCRBase64Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCRBase64Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCRBase64Resp) ProtoMessage() {}

func (x *OCRBase64Resp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCRBase64Resp.ProtoReflect.Descriptor instead.
func (*OCRBase64Resp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{9}
}

func (x *OCRBase64Resp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// fanyi
type FanyiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
}

func (x *FanyiReq) Reset() {
	*x = FanyiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanyiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanyiReq) ProtoMessage() {}

func (x *FanyiReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanyiReq.ProtoReflect.Descriptor instead.
func (*FanyiReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{10}
}

func (x *FanyiReq) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

type FanyiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *FanyiResp) Reset() {
	*x = FanyiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanyiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanyiResp) ProtoMessage() {}

func (x *FanyiResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanyiResp.ProtoReflect.Descriptor instead.
func (*FanyiResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{11}
}

func (x *FanyiResp) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// pdf提取
type PDFExtractionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Content []string `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *PDFExtractionBody) Reset() {
	*x = PDFExtractionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDFExtractionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFExtractionBody) ProtoMessage() {}

func (x *PDFExtractionBody) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFExtractionBody.ProtoReflect.Descriptor instead.
func (*PDFExtractionBody) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{12}
}

func (x *PDFExtractionBody) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PDFExtractionBody) GetContent() []string {
	if x != nil {
		return x.Content
	}
	return nil
}

// pdf提取 - 提取内容为txt
type PDFTxtReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *PDFTxtReq) Reset() {
	*x = PDFTxtReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDFTxtReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFTxtReq) ProtoMessage() {}

func (x *PDFTxtReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFTxtReq.ProtoReflect.Descriptor instead.
func (*PDFTxtReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{13}
}

func (x *PDFTxtReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type PDFTxtResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PDFExtractionBody `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PDFTxtResp) Reset() {
	*x = PDFTxtResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDFTxtResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFTxtResp) ProtoMessage() {}

func (x *PDFTxtResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFTxtResp.ProtoReflect.Descriptor instead.
func (*PDFTxtResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{14}
}

func (x *PDFTxtResp) GetData() []*PDFExtractionBody {
	if x != nil {
		return x.Data
	}
	return nil
}

// pdf提取 - 按行提取内容
type PDFRowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *PDFRowReq) Reset() {
	*x = PDFRowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDFRowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFRowReq) ProtoMessage() {}

func (x *PDFRowReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFRowReq.ProtoReflect.Descriptor instead.
func (*PDFRowReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{15}
}

func (x *PDFRowReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type RDFRowResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PDFExtractionBody `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RDFRowResp) Reset() {
	*x = RDFRowResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDFRowResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDFRowResp) ProtoMessage() {}

func (x *RDFRowResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDFRowResp.ProtoReflect.Descriptor instead.
func (*RDFRowResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{16}
}

func (x *RDFRowResp) GetData() []*PDFExtractionBody {
	if x != nil {
		return x.Data
	}
	return nil
}

// pdf提取 - 提取标准表格
type PDFTableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *PDFTableReq) Reset() {
	*x = PDFTableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDFTableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFTableReq) ProtoMessage() {}

func (x *PDFTableReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFTableReq.ProtoReflect.Descriptor instead.
func (*PDFTableReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{17}
}

func (x *PDFTableReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type PDFTableResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PDFExtractionBody `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PDFTableResp) Reset() {
	*x = PDFTableResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDFTableResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFTableResp) ProtoMessage() {}

func (x *PDFTableResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFTableResp.ProtoReflect.Descriptor instead.
func (*PDFTableResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{18}
}

func (x *PDFTableResp) GetData() []*PDFExtractionBody {
	if x != nil {
		return x.Data
	}
	return nil
}

type EncryptParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Iv  string `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *EncryptParam) Reset() {
	*x = EncryptParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptParam) ProtoMessage() {}

func (x *EncryptParam) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptParam.ProtoReflect.Descriptor instead.
func (*EncryptParam) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{19}
}

func (x *EncryptParam) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *EncryptParam) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EncryptParam) GetIv() string {
	if x != nil {
		return x.Iv
	}
	return ""
}

type DecryptParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Iv  string `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *DecryptParam) Reset() {
	*x = DecryptParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptParam) ProtoMessage() {}

func (x *DecryptParam) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptParam.ProtoReflect.Descriptor instead.
func (*DecryptParam) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{20}
}

func (x *DecryptParam) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *DecryptParam) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DecryptParam) GetIv() string {
	if x != nil {
		return x.Iv
	}
	return ""
}

// AES CBC Encrypt
type AESCBCEncryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *EncryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AESCBCEncryptReq) Reset() {
	*x = AESCBCEncryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCBCEncryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCBCEncryptReq) ProtoMessage() {}

func (x *AESCBCEncryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCBCEncryptReq.ProtoReflect.Descriptor instead.
func (*AESCBCEncryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{21}
}

func (x *AESCBCEncryptReq) GetParam() *EncryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type AESCBCEncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AESCBCEncryptResp) Reset() {
	*x = AESCBCEncryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCBCEncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCBCEncryptResp) ProtoMessage() {}

func (x *AESCBCEncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCBCEncryptResp.ProtoReflect.Descriptor instead.
func (*AESCBCEncryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{22}
}

func (x *AESCBCEncryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// AES CBC Decrypt
type AESCBCDecryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *DecryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AESCBCDecryptReq) Reset() {
	*x = AESCBCDecryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCBCDecryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCBCDecryptReq) ProtoMessage() {}

func (x *AESCBCDecryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCBCDecryptReq.ProtoReflect.Descriptor instead.
func (*AESCBCDecryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{23}
}

func (x *AESCBCDecryptReq) GetParam() *DecryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type AESCBCDecryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AESCBCDecryptResp) Reset() {
	*x = AESCBCDecryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCBCDecryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCBCDecryptResp) ProtoMessage() {}

func (x *AESCBCDecryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCBCDecryptResp.ProtoReflect.Descriptor instead.
func (*AESCBCDecryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{24}
}

func (x *AESCBCDecryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// AES ECB Encrypt
type AESECBEncryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *EncryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AESECBEncryptReq) Reset() {
	*x = AESECBEncryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESECBEncryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESECBEncryptReq) ProtoMessage() {}

func (x *AESECBEncryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESECBEncryptReq.ProtoReflect.Descriptor instead.
func (*AESECBEncryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{25}
}

func (x *AESECBEncryptReq) GetParam() *EncryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type AESECBEncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AESECBEncryptResp) Reset() {
	*x = AESECBEncryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESECBEncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESECBEncryptResp) ProtoMessage() {}

func (x *AESECBEncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESECBEncryptResp.ProtoReflect.Descriptor instead.
func (*AESECBEncryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{26}
}

func (x *AESECBEncryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// AES ECB Decrypt
type AESECBDecryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *DecryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AESECBDecryptReq) Reset() {
	*x = AESECBDecryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESECBDecryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESECBDecryptReq) ProtoMessage() {}

func (x *AESECBDecryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESECBDecryptReq.ProtoReflect.Descriptor instead.
func (*AESECBDecryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{27}
}

func (x *AESECBDecryptReq) GetParam() *DecryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type AESECBDecryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AESECBDecryptResp) Reset() {
	*x = AESECBDecryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESECBDecryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESECBDecryptResp) ProtoMessage() {}

func (x *AESECBDecryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESECBDecryptResp.ProtoReflect.Descriptor instead.
func (*AESECBDecryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{28}
}

func (x *AESECBDecryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// AES CFB Encrypt
type AESCFBEncryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *EncryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AESCFBEncryptReq) Reset() {
	*x = AESCFBEncryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCFBEncryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCFBEncryptReq) ProtoMessage() {}

func (x *AESCFBEncryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCFBEncryptReq.ProtoReflect.Descriptor instead.
func (*AESCFBEncryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{29}
}

func (x *AESCFBEncryptReq) GetParam() *EncryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type AESCFBEncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AESCFBEncryptResp) Reset() {
	*x = AESCFBEncryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCFBEncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCFBEncryptResp) ProtoMessage() {}

func (x *AESCFBEncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCFBEncryptResp.ProtoReflect.Descriptor instead.
func (*AESCFBEncryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{30}
}

func (x *AESCFBEncryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// AES CFB Decrypt
type AESCFBDecryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *DecryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AESCFBDecryptReq) Reset() {
	*x = AESCFBDecryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCFBDecryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCFBDecryptReq) ProtoMessage() {}

func (x *AESCFBDecryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCFBDecryptReq.ProtoReflect.Descriptor instead.
func (*AESCFBDecryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{31}
}

func (x *AESCFBDecryptReq) GetParam() *DecryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type AESCFBDecryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AESCFBDecryptResp) Reset() {
	*x = AESCFBDecryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCFBDecryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCFBDecryptResp) ProtoMessage() {}

func (x *AESCFBDecryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCFBDecryptResp.ProtoReflect.Descriptor instead.
func (*AESCFBDecryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{32}
}

func (x *AESCFBDecryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// AES CTR Encrypt
type AESCTREncryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *EncryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AESCTREncryptReq) Reset() {
	*x = AESCTREncryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCTREncryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCTREncryptReq) ProtoMessage() {}

func (x *AESCTREncryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCTREncryptReq.ProtoReflect.Descriptor instead.
func (*AESCTREncryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{33}
}

func (x *AESCTREncryptReq) GetParam() *EncryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type AESCTREncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AESCTREncryptResp) Reset() {
	*x = AESCTREncryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCTREncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCTREncryptResp) ProtoMessage() {}

func (x *AESCTREncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCTREncryptResp.ProtoReflect.Descriptor instead.
func (*AESCTREncryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{34}
}

func (x *AESCTREncryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// AES CTR Decrypt
type AESCTRDecryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *DecryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AESCTRDecryptReq) Reset() {
	*x = AESCTRDecryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCTRDecryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCTRDecryptReq) ProtoMessage() {}

func (x *AESCTRDecryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCTRDecryptReq.ProtoReflect.Descriptor instead.
func (*AESCTRDecryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{35}
}

func (x *AESCTRDecryptReq) GetParam() *DecryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type AESCTRDecryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AESCTRDecryptResp) Reset() {
	*x = AESCTRDecryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESCTRDecryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESCTRDecryptResp) ProtoMessage() {}

func (x *AESCTRDecryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESCTRDecryptResp.ProtoReflect.Descriptor instead.
func (*AESCTRDecryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{36}
}

func (x *AESCTRDecryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// DES CBC Encrypt
type DESCBCEncryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *EncryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *DESCBCEncryptReq) Reset() {
	*x = DESCBCEncryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCBCEncryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCBCEncryptReq) ProtoMessage() {}

func (x *DESCBCEncryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCBCEncryptReq.ProtoReflect.Descriptor instead.
func (*DESCBCEncryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{37}
}

func (x *DESCBCEncryptReq) GetParam() *EncryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type DESCBCEncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DESCBCEncryptResp) Reset() {
	*x = DESCBCEncryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCBCEncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCBCEncryptResp) ProtoMessage() {}

func (x *DESCBCEncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCBCEncryptResp.ProtoReflect.Descriptor instead.
func (*DESCBCEncryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{38}
}

func (x *DESCBCEncryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// DES CBC Decrypt
type DESCBCDecryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *DecryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *DESCBCDecryptReq) Reset() {
	*x = DESCBCDecryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCBCDecryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCBCDecryptReq) ProtoMessage() {}

func (x *DESCBCDecryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCBCDecryptReq.ProtoReflect.Descriptor instead.
func (*DESCBCDecryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{39}
}

func (x *DESCBCDecryptReq) GetParam() *DecryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type DESCBCDecryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DESCBCDecryptResp) Reset() {
	*x = DESCBCDecryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCBCDecryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCBCDecryptResp) ProtoMessage() {}

func (x *DESCBCDecryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCBCDecryptResp.ProtoReflect.Descriptor instead.
func (*DESCBCDecryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{40}
}

func (x *DESCBCDecryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// DES ECB Encrypt
type DESECBEncryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *EncryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *DESECBEncryptReq) Reset() {
	*x = DESECBEncryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESECBEncryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESECBEncryptReq) ProtoMessage() {}

func (x *DESECBEncryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESECBEncryptReq.ProtoReflect.Descriptor instead.
func (*DESECBEncryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{41}
}

func (x *DESECBEncryptReq) GetParam() *EncryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type DESECBEncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DESECBEncryptResp) Reset() {
	*x = DESECBEncryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESECBEncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESECBEncryptResp) ProtoMessage() {}

func (x *DESECBEncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESECBEncryptResp.ProtoReflect.Descriptor instead.
func (*DESECBEncryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{42}
}

func (x *DESECBEncryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// DES ECB Decrypt
type DESECBDecryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *DecryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *DESECBDecryptReq) Reset() {
	*x = DESECBDecryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESECBDecryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESECBDecryptReq) ProtoMessage() {}

func (x *DESECBDecryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESECBDecryptReq.ProtoReflect.Descriptor instead.
func (*DESECBDecryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{43}
}

func (x *DESECBDecryptReq) GetParam() *DecryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type DESECBDecryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DESECBDecryptResp) Reset() {
	*x = DESECBDecryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESECBDecryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESECBDecryptResp) ProtoMessage() {}

func (x *DESECBDecryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESECBDecryptResp.ProtoReflect.Descriptor instead.
func (*DESECBDecryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{44}
}

func (x *DESECBDecryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// DES CFB Encrypt
type DESCFBEncryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *EncryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *DESCFBEncryptReq) Reset() {
	*x = DESCFBEncryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCFBEncryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCFBEncryptReq) ProtoMessage() {}

func (x *DESCFBEncryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCFBEncryptReq.ProtoReflect.Descriptor instead.
func (*DESCFBEncryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{45}
}

func (x *DESCFBEncryptReq) GetParam() *EncryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type DESCFBEncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DESCFBEncryptResp) Reset() {
	*x = DESCFBEncryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCFBEncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCFBEncryptResp) ProtoMessage() {}

func (x *DESCFBEncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCFBEncryptResp.ProtoReflect.Descriptor instead.
func (*DESCFBEncryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{46}
}

func (x *DESCFBEncryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// DES CFB Decrypt
type DESCFBDecryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *DecryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *DESCFBDecryptReq) Reset() {
	*x = DESCFBDecryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCFBDecryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCFBDecryptReq) ProtoMessage() {}

func (x *DESCFBDecryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCFBDecryptReq.ProtoReflect.Descriptor instead.
func (*DESCFBDecryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{47}
}

func (x *DESCFBDecryptReq) GetParam() *DecryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type DESCFBDecryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DESCFBDecryptResp) Reset() {
	*x = DESCFBDecryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCFBDecryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCFBDecryptResp) ProtoMessage() {}

func (x *DESCFBDecryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCFBDecryptResp.ProtoReflect.Descriptor instead.
func (*DESCFBDecryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{48}
}

func (x *DESCFBDecryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// DES CTR Encrypt
type DESCTREncryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *EncryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *DESCTREncryptReq) Reset() {
	*x = DESCTREncryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCTREncryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCTREncryptReq) ProtoMessage() {}

func (x *DESCTREncryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCTREncryptReq.ProtoReflect.Descriptor instead.
func (*DESCTREncryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{49}
}

func (x *DESCTREncryptReq) GetParam() *EncryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type DESCTREncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DESCTREncryptResp) Reset() {
	*x = DESCTREncryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCTREncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCTREncryptResp) ProtoMessage() {}

func (x *DESCTREncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCTREncryptResp.ProtoReflect.Descriptor instead.
func (*DESCTREncryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{50}
}

func (x *DESCTREncryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// DES CTR Decrypt
type DESCTRDecryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *DecryptParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *DESCTRDecryptReq) Reset() {
	*x = DESCTRDecryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCTRDecryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCTRDecryptReq) ProtoMessage() {}

func (x *DESCTRDecryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCTRDecryptReq.ProtoReflect.Descriptor instead.
func (*DESCTRDecryptReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{51}
}

func (x *DESCTRDecryptReq) GetParam() *DecryptParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type DESCTRDecryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DESCTRDecryptResp) Reset() {
	*x = DESCTRDecryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DESCTRDecryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESCTRDecryptResp) ProtoMessage() {}

func (x *DESCTRDecryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESCTRDecryptResp.ProtoReflect.Descriptor instead.
func (*DESCTRDecryptResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{52}
}

func (x *DESCTRDecryptResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Hmac md5
type HmacMd5Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HmacMd5Req) Reset() {
	*x = HmacMd5Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacMd5Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacMd5Req) ProtoMessage() {}

func (x *HmacMd5Req) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacMd5Req.ProtoReflect.Descriptor instead.
func (*HmacMd5Req) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{53}
}

func (x *HmacMd5Req) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *HmacMd5Req) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HmacMd5Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HmacMd5Resp) Reset() {
	*x = HmacMd5Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacMd5Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacMd5Resp) ProtoMessage() {}

func (x *HmacMd5Resp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacMd5Resp.ProtoReflect.Descriptor instead.
func (*HmacMd5Resp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{54}
}

func (x *HmacMd5Resp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Hmac sha1
type HmacSha1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HmacSha1Req) Reset() {
	*x = HmacSha1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacSha1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacSha1Req) ProtoMessage() {}

func (x *HmacSha1Req) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacSha1Req.ProtoReflect.Descriptor instead.
func (*HmacSha1Req) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{55}
}

func (x *HmacSha1Req) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *HmacSha1Req) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HmacSha1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HmacSha1Resp) Reset() {
	*x = HmacSha1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacSha1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacSha1Resp) ProtoMessage() {}

func (x *HmacSha1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacSha1Resp.ProtoReflect.Descriptor instead.
func (*HmacSha1Resp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{56}
}

func (x *HmacSha1Resp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Hmac sha256
type HmacSha256Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HmacSha256Req) Reset() {
	*x = HmacSha256Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacSha256Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacSha256Req) ProtoMessage() {}

func (x *HmacSha256Req) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacSha256Req.ProtoReflect.Descriptor instead.
func (*HmacSha256Req) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{57}
}

func (x *HmacSha256Req) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *HmacSha256Req) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HmacSha256Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HmacSha256Resp) Reset() {
	*x = HmacSha256Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacSha256Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacSha256Resp) ProtoMessage() {}

func (x *HmacSha256Resp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacSha256Resp.ProtoReflect.Descriptor instead.
func (*HmacSha256Resp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{58}
}

func (x *HmacSha256Resp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Hmac sha512
type HmacSha512Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HmacSha512Req) Reset() {
	*x = HmacSha512Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacSha512Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacSha512Req) ProtoMessage() {}

func (x *HmacSha512Req) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacSha512Req.ProtoReflect.Descriptor instead.
func (*HmacSha512Req) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{59}
}

func (x *HmacSha512Req) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *HmacSha512Req) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HmacSha512Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HmacSha512Resp) Reset() {
	*x = HmacSha512Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacSha512Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacSha512Resp) ProtoMessage() {}

func (x *HmacSha512Resp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacSha512Resp.ProtoReflect.Descriptor instead.
func (*HmacSha512Resp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{60}
}

func (x *HmacSha512Resp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// md 转 html
type Md2HtmlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *Md2HtmlReq) Reset() {
	*x = Md2HtmlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Md2HtmlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Md2HtmlReq) ProtoMessage() {}

func (x *Md2HtmlReq) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Md2HtmlReq.ProtoReflect.Descriptor instead.
func (*Md2HtmlReq) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{61}
}

func (x *Md2HtmlReq) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

type Md2HtmlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Md2HtmlResp) Reset() {
	*x = Md2HtmlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordhelper_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Md2HtmlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Md2HtmlResp) ProtoMessage() {}

func (x *Md2HtmlResp) ProtoReflect() protoreflect.Message {
	mi := &file_wordhelper_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Md2HtmlResp.ProtoReflect.Descriptor instead.
func (*Md2HtmlResp) Descriptor() ([]byte, []int) {
	return file_wordhelper_proto_rawDescGZIP(), []int{62}
}

func (x *Md2HtmlResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_wordhelper_proto protoreflect.FileDescriptor

var file_wordhelper_proto_rawDesc = []byte{
	0x0a, 0x10, 0x77, 0x6f, 0x72, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x35, 0x0a, 0x0d, 0x46, 0x65, 0x6e, 0x63, 0x69, 0x4a,
	0x69, 0x65, 0x62, 0x61, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a,
	0x0e, 0x46, 0x65, 0x6e, 0x63, 0x69, 0x4a, 0x69, 0x65, 0x62, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x06, 0x4f, 0x43, 0x52, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x1d, 0x0a, 0x07, 0x4f, 0x43, 0x52, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x0c, 0x0a, 0x0a, 0x4f, 0x43, 0x52, 0x4c, 0x61, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x22, 0x21, 0x0a, 0x0b, 0x4f, 0x43, 0x52, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x0f, 0x0a, 0x0d, 0x4f, 0x43, 0x52, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x24, 0x0a, 0x0e, 0x4f, 0x43, 0x52, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0c,
	0x4f, 0x43, 0x52, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x69, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x69, 0x6d, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x23,
	0x0a, 0x0d, 0x4f, 0x43, 0x52, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x79, 0x69, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x1f, 0x0a, 0x09, 0x46, 0x61, 0x6e, 0x79, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x41, 0x0a, 0x11, 0x50, 0x44, 0x46, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x1f, 0x0a, 0x09, 0x50, 0x44, 0x46, 0x54, 0x78,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x0a, 0x50, 0x44, 0x46, 0x54,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x44, 0x46, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x1f, 0x0a, 0x09, 0x50, 0x44, 0x46, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x37, 0x0a, 0x0a, 0x52, 0x44, 0x46, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x44, 0x46, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x21, 0x0a, 0x0b, 0x50,
	0x44, 0x46, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x39,
	0x0a, 0x0c, 0x50, 0x44, 0x46, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x44, 0x46, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x0c, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x76, 0x22, 0x42, 0x0a,
	0x0c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x76, 0x22, 0x3a, 0x0a, 0x10, 0x41, 0x45, 0x53, 0x43, 0x42, 0x43, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a,
	0x11, 0x41, 0x45, 0x53, 0x43, 0x42, 0x43, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x41, 0x45, 0x53, 0x43, 0x42, 0x43,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x45, 0x53, 0x43, 0x42, 0x43, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x41,
	0x45, 0x53, 0x45, 0x43, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x45, 0x53, 0x45, 0x43,
	0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x3a, 0x0a, 0x10, 0x41, 0x45, 0x53, 0x45, 0x43, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11,
	0x41, 0x45, 0x53, 0x45, 0x43, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x41, 0x45, 0x53, 0x43, 0x46, 0x42, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x45, 0x53, 0x43, 0x46, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x41, 0x45,
	0x53, 0x43, 0x46, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x45, 0x53, 0x43, 0x46, 0x42,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3a, 0x0a, 0x10, 0x41, 0x45, 0x53, 0x43, 0x54, 0x52, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x41,
	0x45, 0x53, 0x43, 0x54, 0x52, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x41, 0x45, 0x53, 0x43, 0x54, 0x52, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x27, 0x0a, 0x11, 0x41, 0x45, 0x53, 0x43, 0x54, 0x52, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x44, 0x45, 0x53,
	0x43, 0x42, 0x43, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x45, 0x53, 0x43, 0x42, 0x43, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a,
	0x0a, 0x10, 0x44, 0x45, 0x53, 0x43, 0x42, 0x43, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x45,
	0x53, 0x43, 0x42, 0x43, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x44, 0x45, 0x53, 0x45, 0x43, 0x42, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x27, 0x0a, 0x11, 0x44, 0x45, 0x53, 0x45, 0x43, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x44, 0x45, 0x53, 0x45,
	0x43, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x45, 0x53, 0x45, 0x43, 0x42, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a,
	0x10, 0x44, 0x45, 0x53, 0x43, 0x46, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x45, 0x53,
	0x43, 0x46, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x44, 0x45, 0x53, 0x43, 0x46, 0x42, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27,
	0x0a, 0x11, 0x44, 0x45, 0x53, 0x43, 0x46, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x44, 0x45, 0x53, 0x43, 0x54,
	0x52, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x45, 0x53, 0x43, 0x54, 0x52, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10,
	0x44, 0x45, 0x53, 0x43, 0x54, 0x52, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x45, 0x53, 0x43,
	0x54, 0x52, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x30, 0x0a, 0x0a, 0x48, 0x6d, 0x61, 0x63, 0x4d, 0x64, 0x35, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x21, 0x0a, 0x0b, 0x48, 0x6d, 0x61, 0x63, 0x4d, 0x64, 0x35, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x0b, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68,
	0x61, 0x31, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x22, 0x0a, 0x0c, 0x48, 0x6d, 0x61,
	0x63, 0x53, 0x68, 0x61, 0x31, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a,
	0x0d, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x24, 0x0a, 0x0e, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x0d, 0x48, 0x6d, 0x61, 0x63,
	0x53, 0x68, 0x61, 0x35, 0x31, 0x32, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x24, 0x0a,
	0x0e, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68, 0x61, 0x35, 0x31, 0x32, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x0a, 0x4d, 0x64, 0x32, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x74, 0x72, 0x22, 0x21, 0x0a, 0x0b, 0x4d, 0x64, 0x32, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xf4, 0x0c, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x64, 0x48,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x50, 0x43, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x65, 0x6e, 0x63,
	0x69, 0x4a, 0x69, 0x65, 0x62, 0x61, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x6e, 0x63,
	0x69, 0x4a, 0x69, 0x65, 0x62, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x65, 0x6e, 0x63, 0x69, 0x4a, 0x69, 0x65, 0x62, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a,
	0x03, 0x4f, 0x43, 0x52, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x43, 0x52, 0x52, 0x65, 0x71,
	0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x43, 0x52, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x0c, 0x4f, 0x43, 0x52, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x43, 0x52, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x43, 0x52, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33,
	0x0a, 0x0a, 0x4f, 0x43, 0x52, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x4f, 0x43, 0x52, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x43, 0x52, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x4f, 0x43, 0x52, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x43, 0x52, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52,
	0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x43, 0x52, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x46, 0x61, 0x6e, 0x79, 0x69, 0x12, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x6e, 0x79, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x61, 0x6e, 0x79, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x50,
	0x44, 0x46, 0x54, 0x78, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x44, 0x46, 0x54, 0x78,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x44, 0x46, 0x54, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x50, 0x44, 0x46, 0x52, 0x6f, 0x77, 0x12, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x44, 0x46, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x44, 0x46, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a,
	0x08, 0x50, 0x44, 0x46, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x44, 0x46, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x44, 0x46, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x07,
	0x4d, 0x64, 0x32, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x64, 0x32,
	0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x64, 0x32,
	0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x41, 0x45, 0x53, 0x43,
	0x42, 0x43, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x45, 0x53, 0x43, 0x42, 0x43, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x43, 0x42, 0x43, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x41, 0x45, 0x53, 0x43, 0x42, 0x43,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53,
	0x43, 0x42, 0x43, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x43, 0x42, 0x43, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x41, 0x45, 0x53, 0x45, 0x43, 0x42, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x45, 0x43,
	0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x45, 0x53, 0x45, 0x43, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x41, 0x45, 0x53, 0x45, 0x43, 0x42, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x45, 0x43, 0x42, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x45, 0x53, 0x45, 0x43, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3c, 0x0a, 0x0d, 0x41, 0x45, 0x53, 0x43, 0x46, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x43, 0x46, 0x42, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53,
	0x43, 0x46, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c,
	0x0a, 0x0d, 0x41, 0x45, 0x53, 0x43, 0x46, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x43, 0x46, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x43, 0x46,
	0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d,
	0x41, 0x45, 0x53, 0x43, 0x54, 0x52, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x43, 0x54, 0x52, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x43, 0x54, 0x52, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x41, 0x45,
	0x53, 0x43, 0x54, 0x52, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x45, 0x53, 0x43, 0x54, 0x52, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x45, 0x53, 0x43, 0x54, 0x52, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x45, 0x53, 0x43,
	0x42, 0x43, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x45, 0x53, 0x43, 0x42, 0x43, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x43, 0x42, 0x43, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x45, 0x53, 0x43, 0x42, 0x43,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53,
	0x43, 0x42, 0x43, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x43, 0x42, 0x43, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x45, 0x53, 0x45, 0x43, 0x42, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x45, 0x43,
	0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x45, 0x53, 0x45, 0x43, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x45, 0x53, 0x45, 0x43, 0x42, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x45, 0x43, 0x42, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x45, 0x53, 0x45, 0x43, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x45, 0x53, 0x43, 0x46, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x43, 0x46, 0x42, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53,
	0x43, 0x46, 0x42, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c,
	0x0a, 0x0d, 0x44, 0x45, 0x53, 0x43, 0x46, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x43, 0x46, 0x42, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x43, 0x46,
	0x42, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d,
	0x44, 0x45, 0x53, 0x43, 0x54, 0x52, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x43, 0x54, 0x52, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x43, 0x54, 0x52, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x45,
	0x53, 0x43, 0x54, 0x52, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x45, 0x53, 0x43, 0x54, 0x52, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x45, 0x53, 0x43, 0x54, 0x52, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x48, 0x6d, 0x61, 0x63,
	0x4d, 0x64, 0x35, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x4d, 0x64, 0x35,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x4d, 0x64, 0x35,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68, 0x61, 0x31,
	0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68, 0x61, 0x31, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68, 0x61, 0x31, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x53, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x48, 0x6d, 0x61, 0x63,
	0x53, 0x68, 0x61, 0x35, 0x31, 0x32, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x6d, 0x61, 0x63,
	0x53, 0x68, 0x61, 0x35, 0x31, 0x32, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x6d, 0x61, 0x63, 0x53, 0x68, 0x61, 0x35, 0x31, 0x32, 0x52, 0x65, 0x73, 0x70, 0x42, 0x08, 0x5a,
	0x06, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wordhelper_proto_rawDescOnce sync.Once
	file_wordhelper_proto_rawDescData = file_wordhelper_proto_rawDesc
)

func file_wordhelper_proto_rawDescGZIP() []byte {
	file_wordhelper_proto_rawDescOnce.Do(func() {
		file_wordhelper_proto_rawDescData = protoimpl.X.CompressGZIP(file_wordhelper_proto_rawDescData)
	})
	return file_wordhelper_proto_rawDescData
}

var file_wordhelper_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_wordhelper_proto_goTypes = []interface{}{
	(*FenciJiebaReq)(nil),     // 0: pb.FenciJiebaReq
	(*FenciJiebaResp)(nil),    // 1: pb.FenciJiebaResp
	(*OCRReq)(nil),            // 2: pb.OCRReq
	(*OCRResp)(nil),           // 3: pb.OCRResp
	(*OCRLangReq)(nil),        // 4: pb.OCRLangReq
	(*OCRLangResp)(nil),       // 5: pb.OCRLangResp
	(*OCRVersionReq)(nil),     // 6: pb.OCRVersionReq
	(*OCRVersionResp)(nil),    // 7: pb.OCRVersionResp
	(*OCRBase64Req)(nil),      // 8: pb.OCRBase64Req
	(*OCRBase64Resp)(nil),     // 9: pb.OCRBase64Resp
	(*FanyiReq)(nil),          // 10: pb.FanyiReq
	(*FanyiResp)(nil),         // 11: pb.FanyiResp
	(*PDFExtractionBody)(nil), // 12: pb.PDFExtractionBody
	(*PDFTxtReq)(nil),         // 13: pb.PDFTxtReq
	(*PDFTxtResp)(nil),        // 14: pb.PDFTxtResp
	(*PDFRowReq)(nil),         // 15: pb.PDFRowReq
	(*RDFRowResp)(nil),        // 16: pb.RDFRowResp
	(*PDFTableReq)(nil),       // 17: pb.PDFTableReq
	(*PDFTableResp)(nil),      // 18: pb.PDFTableResp
	(*EncryptParam)(nil),      // 19: pb.EncryptParam
	(*DecryptParam)(nil),      // 20: pb.DecryptParam
	(*AESCBCEncryptReq)(nil),  // 21: pb.AESCBCEncryptReq
	(*AESCBCEncryptResp)(nil), // 22: pb.AESCBCEncryptResp
	(*AESCBCDecryptReq)(nil),  // 23: pb.AESCBCDecryptReq
	(*AESCBCDecryptResp)(nil), // 24: pb.AESCBCDecryptResp
	(*AESECBEncryptReq)(nil),  // 25: pb.AESECBEncryptReq
	(*AESECBEncryptResp)(nil), // 26: pb.AESECBEncryptResp
	(*AESECBDecryptReq)(nil),  // 27: pb.AESECBDecryptReq
	(*AESECBDecryptResp)(nil), // 28: pb.AESECBDecryptResp
	(*AESCFBEncryptReq)(nil),  // 29: pb.AESCFBEncryptReq
	(*AESCFBEncryptResp)(nil), // 30: pb.AESCFBEncryptResp
	(*AESCFBDecryptReq)(nil),  // 31: pb.AESCFBDecryptReq
	(*AESCFBDecryptResp)(nil), // 32: pb.AESCFBDecryptResp
	(*AESCTREncryptReq)(nil),  // 33: pb.AESCTREncryptReq
	(*AESCTREncryptResp)(nil), // 34: pb.AESCTREncryptResp
	(*AESCTRDecryptReq)(nil),  // 35: pb.AESCTRDecryptReq
	(*AESCTRDecryptResp)(nil), // 36: pb.AESCTRDecryptResp
	(*DESCBCEncryptReq)(nil),  // 37: pb.DESCBCEncryptReq
	(*DESCBCEncryptResp)(nil), // 38: pb.DESCBCEncryptResp
	(*DESCBCDecryptReq)(nil),  // 39: pb.DESCBCDecryptReq
	(*DESCBCDecryptResp)(nil), // 40: pb.DESCBCDecryptResp
	(*DESECBEncryptReq)(nil),  // 41: pb.DESECBEncryptReq
	(*DESECBEncryptResp)(nil), // 42: pb.DESECBEncryptResp
	(*DESECBDecryptReq)(nil),  // 43: pb.DESECBDecryptReq
	(*DESECBDecryptResp)(nil), // 44: pb.DESECBDecryptResp
	(*DESCFBEncryptReq)(nil),  // 45: pb.DESCFBEncryptReq
	(*DESCFBEncryptResp)(nil), // 46: pb.DESCFBEncryptResp
	(*DESCFBDecryptReq)(nil),  // 47: pb.DESCFBDecryptReq
	(*DESCFBDecryptResp)(nil), // 48: pb.DESCFBDecryptResp
	(*DESCTREncryptReq)(nil),  // 49: pb.DESCTREncryptReq
	(*DESCTREncryptResp)(nil), // 50: pb.DESCTREncryptResp
	(*DESCTRDecryptReq)(nil),  // 51: pb.DESCTRDecryptReq
	(*DESCTRDecryptResp)(nil), // 52: pb.DESCTRDecryptResp
	(*HmacMd5Req)(nil),        // 53: pb.HmacMd5Req
	(*HmacMd5Resp)(nil),       // 54: pb.HmacMd5Resp
	(*HmacSha1Req)(nil),       // 55: pb.HmacSha1Req
	(*HmacSha1Resp)(nil),      // 56: pb.HmacSha1Resp
	(*HmacSha256Req)(nil),     // 57: pb.HmacSha256Req
	(*HmacSha256Resp)(nil),    // 58: pb.HmacSha256Resp
	(*HmacSha512Req)(nil),     // 59: pb.HmacSha512Req
	(*HmacSha512Resp)(nil),    // 60: pb.HmacSha512Resp
	(*Md2HtmlReq)(nil),        // 61: pb.Md2HtmlReq
	(*Md2HtmlResp)(nil),       // 62: pb.Md2HtmlResp
}
var file_wordhelper_proto_depIdxs = []int32{
	12, // 0: pb.PDFTxtResp.data:type_name -> pb.PDFExtractionBody
	12, // 1: pb.RDFRowResp.data:type_name -> pb.PDFExtractionBody
	12, // 2: pb.PDFTableResp.data:type_name -> pb.PDFExtractionBody
	19, // 3: pb.AESCBCEncryptReq.param:type_name -> pb.EncryptParam
	20, // 4: pb.AESCBCDecryptReq.param:type_name -> pb.DecryptParam
	19, // 5: pb.AESECBEncryptReq.param:type_name -> pb.EncryptParam
	20, // 6: pb.AESECBDecryptReq.param:type_name -> pb.DecryptParam
	19, // 7: pb.AESCFBEncryptReq.param:type_name -> pb.EncryptParam
	20, // 8: pb.AESCFBDecryptReq.param:type_name -> pb.DecryptParam
	19, // 9: pb.AESCTREncryptReq.param:type_name -> pb.EncryptParam
	20, // 10: pb.AESCTRDecryptReq.param:type_name -> pb.DecryptParam
	19, // 11: pb.DESCBCEncryptReq.param:type_name -> pb.EncryptParam
	20, // 12: pb.DESCBCDecryptReq.param:type_name -> pb.DecryptParam
	19, // 13: pb.DESECBEncryptReq.param:type_name -> pb.EncryptParam
	20, // 14: pb.DESECBDecryptReq.param:type_name -> pb.DecryptParam
	19, // 15: pb.DESCFBEncryptReq.param:type_name -> pb.EncryptParam
	20, // 16: pb.DESCFBDecryptReq.param:type_name -> pb.DecryptParam
	19, // 17: pb.DESCTREncryptReq.param:type_name -> pb.EncryptParam
	20, // 18: pb.DESCTRDecryptReq.param:type_name -> pb.DecryptParam
	0,  // 19: pb.WordHelperRPC.FenciJieba:input_type -> pb.FenciJiebaReq
	2,  // 20: pb.WordHelperRPC.OCR:input_type -> pb.OCRReq
	4,  // 21: pb.WordHelperRPC.OCRLanguages:input_type -> pb.OCRLangReq
	6,  // 22: pb.WordHelperRPC.OCRVersion:input_type -> pb.OCRVersionReq
	8,  // 23: pb.WordHelperRPC.OCRBase64:input_type -> pb.OCRBase64Req
	10, // 24: pb.WordHelperRPC.Fanyi:input_type -> pb.FanyiReq
	13, // 25: pb.WordHelperRPC.PDFTxt:input_type -> pb.PDFTxtReq
	15, // 26: pb.WordHelperRPC.PDFRow:input_type -> pb.PDFRowReq
	17, // 27: pb.WordHelperRPC.PDFTable:input_type -> pb.PDFTableReq
	61, // 28: pb.WordHelperRPC.Md2Html:input_type -> pb.Md2HtmlReq
	21, // 29: pb.WordHelperRPC.AESCBCEncrypt:input_type -> pb.AESCBCEncryptReq
	23, // 30: pb.WordHelperRPC.AESCBCDecrypt:input_type -> pb.AESCBCDecryptReq
	25, // 31: pb.WordHelperRPC.AESECBEncrypt:input_type -> pb.AESECBEncryptReq
	27, // 32: pb.WordHelperRPC.AESECBDecrypt:input_type -> pb.AESECBDecryptReq
	29, // 33: pb.WordHelperRPC.AESCFBEncrypt:input_type -> pb.AESCFBEncryptReq
	31, // 34: pb.WordHelperRPC.AESCFBDecrypt:input_type -> pb.AESCFBDecryptReq
	33, // 35: pb.WordHelperRPC.AESCTREncrypt:input_type -> pb.AESCTREncryptReq
	35, // 36: pb.WordHelperRPC.AESCTRDecrypt:input_type -> pb.AESCTRDecryptReq
	37, // 37: pb.WordHelperRPC.DESCBCEncrypt:input_type -> pb.DESCBCEncryptReq
	39, // 38: pb.WordHelperRPC.DESCBCDecrypt:input_type -> pb.DESCBCDecryptReq
	41, // 39: pb.WordHelperRPC.DESECBEncrypt:input_type -> pb.DESECBEncryptReq
	43, // 40: pb.WordHelperRPC.DESECBDecrypt:input_type -> pb.DESECBDecryptReq
	45, // 41: pb.WordHelperRPC.DESCFBEncrypt:input_type -> pb.DESCFBEncryptReq
	47, // 42: pb.WordHelperRPC.DESCFBDecrypt:input_type -> pb.DESCFBDecryptReq
	49, // 43: pb.WordHelperRPC.DESCTREncrypt:input_type -> pb.DESCTREncryptReq
	51, // 44: pb.WordHelperRPC.DESCTRDecrypt:input_type -> pb.DESCTRDecryptReq
	53, // 45: pb.WordHelperRPC.HmacMd5:input_type -> pb.HmacMd5Req
	55, // 46: pb.WordHelperRPC.HmacSha1:input_type -> pb.HmacSha1Req
	57, // 47: pb.WordHelperRPC.HmacSha256:input_type -> pb.HmacSha256Req
	59, // 48: pb.WordHelperRPC.HmacSha512:input_type -> pb.HmacSha512Req
	1,  // 49: pb.WordHelperRPC.FenciJieba:output_type -> pb.FenciJiebaResp
	3,  // 50: pb.WordHelperRPC.OCR:output_type -> pb.OCRResp
	5,  // 51: pb.WordHelperRPC.OCRLanguages:output_type -> pb.OCRLangResp
	7,  // 52: pb.WordHelperRPC.OCRVersion:output_type -> pb.OCRVersionResp
	9,  // 53: pb.WordHelperRPC.OCRBase64:output_type -> pb.OCRBase64Resp
	11, // 54: pb.WordHelperRPC.Fanyi:output_type -> pb.FanyiResp
	14, // 55: pb.WordHelperRPC.PDFTxt:output_type -> pb.PDFTxtResp
	16, // 56: pb.WordHelperRPC.PDFRow:output_type -> pb.RDFRowResp
	18, // 57: pb.WordHelperRPC.PDFTable:output_type -> pb.PDFTableResp
	62, // 58: pb.WordHelperRPC.Md2Html:output_type -> pb.Md2HtmlResp
	22, // 59: pb.WordHelperRPC.AESCBCEncrypt:output_type -> pb.AESCBCEncryptResp
	24, // 60: pb.WordHelperRPC.AESCBCDecrypt:output_type -> pb.AESCBCDecryptResp
	26, // 61: pb.WordHelperRPC.AESECBEncrypt:output_type -> pb.AESECBEncryptResp
	28, // 62: pb.WordHelperRPC.AESECBDecrypt:output_type -> pb.AESECBDecryptResp
	30, // 63: pb.WordHelperRPC.AESCFBEncrypt:output_type -> pb.AESCFBEncryptResp
	32, // 64: pb.WordHelperRPC.AESCFBDecrypt:output_type -> pb.AESCFBDecryptResp
	34, // 65: pb.WordHelperRPC.AESCTREncrypt:output_type -> pb.AESCTREncryptResp
	36, // 66: pb.WordHelperRPC.AESCTRDecrypt:output_type -> pb.AESCTRDecryptResp
	38, // 67: pb.WordHelperRPC.DESCBCEncrypt:output_type -> pb.DESCBCEncryptResp
	40, // 68: pb.WordHelperRPC.DESCBCDecrypt:output_type -> pb.DESCBCDecryptResp
	42, // 69: pb.WordHelperRPC.DESECBEncrypt:output_type -> pb.DESECBEncryptResp
	44, // 70: pb.WordHelperRPC.DESECBDecrypt:output_type -> pb.DESECBDecryptResp
	46, // 71: pb.WordHelperRPC.DESCFBEncrypt:output_type -> pb.DESCFBEncryptResp
	48, // 72: pb.WordHelperRPC.DESCFBDecrypt:output_type -> pb.DESCFBDecryptResp
	50, // 73: pb.WordHelperRPC.DESCTREncrypt:output_type -> pb.DESCTREncryptResp
	52, // 74: pb.WordHelperRPC.DESCTRDecrypt:output_type -> pb.DESCTRDecryptResp
	54, // 75: pb.WordHelperRPC.HmacMd5:output_type -> pb.HmacMd5Resp
	56, // 76: pb.WordHelperRPC.HmacSha1:output_type -> pb.HmacSha1Resp
	58, // 77: pb.WordHelperRPC.HmacSha256:output_type -> pb.HmacSha256Resp
	60, // 78: pb.WordHelperRPC.HmacSha512:output_type -> pb.HmacSha512Resp
	49, // [49:79] is the sub-list for method output_type
	19, // [19:49] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_wordhelper_proto_init() }
func file_wordhelper_proto_init() {
	if File_wordhelper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wordhelper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FenciJiebaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FenciJiebaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRLangReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRLangResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRBase64Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCRBase64Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanyiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanyiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDFExtractionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDFTxtReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDFTxtResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDFRowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RDFRowResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDFTableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDFTableResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCBCEncryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCBCEncryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCBCDecryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCBCDecryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESECBEncryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESECBEncryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESECBDecryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESECBDecryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCFBEncryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCFBEncryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCFBDecryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCFBDecryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCTREncryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCTREncryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCTRDecryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESCTRDecryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCBCEncryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCBCEncryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCBCDecryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCBCDecryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESECBEncryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESECBEncryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESECBDecryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESECBDecryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCFBEncryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCFBEncryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCFBDecryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCFBDecryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCTREncryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCTREncryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCTRDecryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DESCTRDecryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacMd5Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacMd5Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacSha1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacSha1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacSha256Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacSha256Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacSha512Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacSha512Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Md2HtmlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordhelper_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Md2HtmlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wordhelper_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wordhelper_proto_goTypes,
		DependencyIndexes: file_wordhelper_proto_depIdxs,
		MessageInfos:      file_wordhelper_proto_msgTypes,
	}.Build()
	File_wordhelper_proto = out.File
	file_wordhelper_proto_rawDesc = nil
	file_wordhelper_proto_goTypes = nil
	file_wordhelper_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WordHelperRPCClient is the client API for WordHelperRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WordHelperRPCClient interface {
	FenciJieba(ctx context.Context, in *FenciJiebaReq, opts ...grpc.CallOption) (*FenciJiebaResp, error)
	OCR(ctx context.Context, in *OCRReq, opts ...grpc.CallOption) (*OCRResp, error)
	OCRLanguages(ctx context.Context, in *OCRLangReq, opts ...grpc.CallOption) (*OCRLangResp, error)
	OCRVersion(ctx context.Context, in *OCRVersionReq, opts ...grpc.CallOption) (*OCRVersionResp, error)
	OCRBase64(ctx context.Context, in *OCRBase64Req, opts ...grpc.CallOption) (*OCRBase64Resp, error)
	Fanyi(ctx context.Context, in *FanyiReq, opts ...grpc.CallOption) (*FanyiResp, error)
	PDFTxt(ctx context.Context, in *PDFTxtReq, opts ...grpc.CallOption) (*PDFTxtResp, error)
	PDFRow(ctx context.Context, in *PDFRowReq, opts ...grpc.CallOption) (*RDFRowResp, error)
	PDFTable(ctx context.Context, in *PDFTableReq, opts ...grpc.CallOption) (*PDFTableResp, error)
	Md2Html(ctx context.Context, in *Md2HtmlReq, opts ...grpc.CallOption) (*Md2HtmlResp, error)
	// AES
	AESCBCEncrypt(ctx context.Context, in *AESCBCEncryptReq, opts ...grpc.CallOption) (*AESCBCEncryptResp, error)
	AESCBCDecrypt(ctx context.Context, in *AESCBCDecryptReq, opts ...grpc.CallOption) (*AESCBCDecryptResp, error)
	AESECBEncrypt(ctx context.Context, in *AESECBEncryptReq, opts ...grpc.CallOption) (*AESECBEncryptResp, error)
	AESECBDecrypt(ctx context.Context, in *AESECBDecryptReq, opts ...grpc.CallOption) (*AESECBDecryptResp, error)
	AESCFBEncrypt(ctx context.Context, in *AESCFBEncryptReq, opts ...grpc.CallOption) (*AESCFBEncryptResp, error)
	AESCFBDecrypt(ctx context.Context, in *AESCFBDecryptReq, opts ...grpc.CallOption) (*AESCFBDecryptResp, error)
	AESCTREncrypt(ctx context.Context, in *AESCTREncryptReq, opts ...grpc.CallOption) (*AESCTREncryptResp, error)
	AESCTRDecrypt(ctx context.Context, in *AESCTRDecryptReq, opts ...grpc.CallOption) (*AESCTRDecryptResp, error)
	// DES
	DESCBCEncrypt(ctx context.Context, in *DESCBCEncryptReq, opts ...grpc.CallOption) (*DESCBCEncryptResp, error)
	DESCBCDecrypt(ctx context.Context, in *DESCBCDecryptReq, opts ...grpc.CallOption) (*DESCBCDecryptResp, error)
	DESECBEncrypt(ctx context.Context, in *DESECBEncryptReq, opts ...grpc.CallOption) (*DESECBEncryptResp, error)
	DESECBDecrypt(ctx context.Context, in *DESECBDecryptReq, opts ...grpc.CallOption) (*DESECBDecryptResp, error)
	DESCFBEncrypt(ctx context.Context, in *DESCFBEncryptReq, opts ...grpc.CallOption) (*DESCFBEncryptResp, error)
	DESCFBDecrypt(ctx context.Context, in *DESCFBDecryptReq, opts ...grpc.CallOption) (*DESCFBDecryptResp, error)
	DESCTREncrypt(ctx context.Context, in *DESCTREncryptReq, opts ...grpc.CallOption) (*DESCTREncryptResp, error)
	DESCTRDecrypt(ctx context.Context, in *DESCTRDecryptReq, opts ...grpc.CallOption) (*DESCTRDecryptResp, error)
	// Hmac
	HmacMd5(ctx context.Context, in *HmacMd5Req, opts ...grpc.CallOption) (*HmacMd5Resp, error)
	HmacSha1(ctx context.Context, in *HmacSha1Req, opts ...grpc.CallOption) (*HmacSha1Resp, error)
	HmacSha256(ctx context.Context, in *HmacSha256Req, opts ...grpc.CallOption) (*HmacSha256Resp, error)
	HmacSha512(ctx context.Context, in *HmacSha512Req, opts ...grpc.CallOption) (*HmacSha512Resp, error)
}

type wordHelperRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWordHelperRPCClient(cc grpc.ClientConnInterface) WordHelperRPCClient {
	return &wordHelperRPCClient{cc}
}

func (c *wordHelperRPCClient) FenciJieba(ctx context.Context, in *FenciJiebaReq, opts ...grpc.CallOption) (*FenciJiebaResp, error) {
	out := new(FenciJiebaResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/FenciJieba", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) OCR(ctx context.Context, in *OCRReq, opts ...grpc.CallOption) (*OCRResp, error) {
	out := new(OCRResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/OCR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) OCRLanguages(ctx context.Context, in *OCRLangReq, opts ...grpc.CallOption) (*OCRLangResp, error) {
	out := new(OCRLangResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/OCRLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) OCRVersion(ctx context.Context, in *OCRVersionReq, opts ...grpc.CallOption) (*OCRVersionResp, error) {
	out := new(OCRVersionResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/OCRVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) OCRBase64(ctx context.Context, in *OCRBase64Req, opts ...grpc.CallOption) (*OCRBase64Resp, error) {
	out := new(OCRBase64Resp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/OCRBase64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) Fanyi(ctx context.Context, in *FanyiReq, opts ...grpc.CallOption) (*FanyiResp, error) {
	out := new(FanyiResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/Fanyi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) PDFTxt(ctx context.Context, in *PDFTxtReq, opts ...grpc.CallOption) (*PDFTxtResp, error) {
	out := new(PDFTxtResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/PDFTxt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) PDFRow(ctx context.Context, in *PDFRowReq, opts ...grpc.CallOption) (*RDFRowResp, error) {
	out := new(RDFRowResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/PDFRow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) PDFTable(ctx context.Context, in *PDFTableReq, opts ...grpc.CallOption) (*PDFTableResp, error) {
	out := new(PDFTableResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/PDFTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) Md2Html(ctx context.Context, in *Md2HtmlReq, opts ...grpc.CallOption) (*Md2HtmlResp, error) {
	out := new(Md2HtmlResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/Md2Html", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) AESCBCEncrypt(ctx context.Context, in *AESCBCEncryptReq, opts ...grpc.CallOption) (*AESCBCEncryptResp, error) {
	out := new(AESCBCEncryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/AESCBCEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) AESCBCDecrypt(ctx context.Context, in *AESCBCDecryptReq, opts ...grpc.CallOption) (*AESCBCDecryptResp, error) {
	out := new(AESCBCDecryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/AESCBCDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) AESECBEncrypt(ctx context.Context, in *AESECBEncryptReq, opts ...grpc.CallOption) (*AESECBEncryptResp, error) {
	out := new(AESECBEncryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/AESECBEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) AESECBDecrypt(ctx context.Context, in *AESECBDecryptReq, opts ...grpc.CallOption) (*AESECBDecryptResp, error) {
	out := new(AESECBDecryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/AESECBDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) AESCFBEncrypt(ctx context.Context, in *AESCFBEncryptReq, opts ...grpc.CallOption) (*AESCFBEncryptResp, error) {
	out := new(AESCFBEncryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/AESCFBEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) AESCFBDecrypt(ctx context.Context, in *AESCFBDecryptReq, opts ...grpc.CallOption) (*AESCFBDecryptResp, error) {
	out := new(AESCFBDecryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/AESCFBDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) AESCTREncrypt(ctx context.Context, in *AESCTREncryptReq, opts ...grpc.CallOption) (*AESCTREncryptResp, error) {
	out := new(AESCTREncryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/AESCTREncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) AESCTRDecrypt(ctx context.Context, in *AESCTRDecryptReq, opts ...grpc.CallOption) (*AESCTRDecryptResp, error) {
	out := new(AESCTRDecryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/AESCTRDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) DESCBCEncrypt(ctx context.Context, in *DESCBCEncryptReq, opts ...grpc.CallOption) (*DESCBCEncryptResp, error) {
	out := new(DESCBCEncryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/DESCBCEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) DESCBCDecrypt(ctx context.Context, in *DESCBCDecryptReq, opts ...grpc.CallOption) (*DESCBCDecryptResp, error) {
	out := new(DESCBCDecryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/DESCBCDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) DESECBEncrypt(ctx context.Context, in *DESECBEncryptReq, opts ...grpc.CallOption) (*DESECBEncryptResp, error) {
	out := new(DESECBEncryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/DESECBEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) DESECBDecrypt(ctx context.Context, in *DESECBDecryptReq, opts ...grpc.CallOption) (*DESECBDecryptResp, error) {
	out := new(DESECBDecryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/DESECBDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) DESCFBEncrypt(ctx context.Context, in *DESCFBEncryptReq, opts ...grpc.CallOption) (*DESCFBEncryptResp, error) {
	out := new(DESCFBEncryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/DESCFBEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) DESCFBDecrypt(ctx context.Context, in *DESCFBDecryptReq, opts ...grpc.CallOption) (*DESCFBDecryptResp, error) {
	out := new(DESCFBDecryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/DESCFBDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) DESCTREncrypt(ctx context.Context, in *DESCTREncryptReq, opts ...grpc.CallOption) (*DESCTREncryptResp, error) {
	out := new(DESCTREncryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/DESCTREncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) DESCTRDecrypt(ctx context.Context, in *DESCTRDecryptReq, opts ...grpc.CallOption) (*DESCTRDecryptResp, error) {
	out := new(DESCTRDecryptResp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/DESCTRDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) HmacMd5(ctx context.Context, in *HmacMd5Req, opts ...grpc.CallOption) (*HmacMd5Resp, error) {
	out := new(HmacMd5Resp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/HmacMd5", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) HmacSha1(ctx context.Context, in *HmacSha1Req, opts ...grpc.CallOption) (*HmacSha1Resp, error) {
	out := new(HmacSha1Resp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/HmacSha1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) HmacSha256(ctx context.Context, in *HmacSha256Req, opts ...grpc.CallOption) (*HmacSha256Resp, error) {
	out := new(HmacSha256Resp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/HmacSha256", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordHelperRPCClient) HmacSha512(ctx context.Context, in *HmacSha512Req, opts ...grpc.CallOption) (*HmacSha512Resp, error) {
	out := new(HmacSha512Resp)
	err := c.cc.Invoke(ctx, "/pb.WordHelperRPC/HmacSha512", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordHelperRPCServer is the server API for WordHelperRPC service.
type WordHelperRPCServer interface {
	FenciJieba(context.Context, *FenciJiebaReq) (*FenciJiebaResp, error)
	OCR(context.Context, *OCRReq) (*OCRResp, error)
	OCRLanguages(context.Context, *OCRLangReq) (*OCRLangResp, error)
	OCRVersion(context.Context, *OCRVersionReq) (*OCRVersionResp, error)
	OCRBase64(context.Context, *OCRBase64Req) (*OCRBase64Resp, error)
	Fanyi(context.Context, *FanyiReq) (*FanyiResp, error)
	PDFTxt(context.Context, *PDFTxtReq) (*PDFTxtResp, error)
	PDFRow(context.Context, *PDFRowReq) (*RDFRowResp, error)
	PDFTable(context.Context, *PDFTableReq) (*PDFTableResp, error)
	Md2Html(context.Context, *Md2HtmlReq) (*Md2HtmlResp, error)
	// AES
	AESCBCEncrypt(context.Context, *AESCBCEncryptReq) (*AESCBCEncryptResp, error)
	AESCBCDecrypt(context.Context, *AESCBCDecryptReq) (*AESCBCDecryptResp, error)
	AESECBEncrypt(context.Context, *AESECBEncryptReq) (*AESECBEncryptResp, error)
	AESECBDecrypt(context.Context, *AESECBDecryptReq) (*AESECBDecryptResp, error)
	AESCFBEncrypt(context.Context, *AESCFBEncryptReq) (*AESCFBEncryptResp, error)
	AESCFBDecrypt(context.Context, *AESCFBDecryptReq) (*AESCFBDecryptResp, error)
	AESCTREncrypt(context.Context, *AESCTREncryptReq) (*AESCTREncryptResp, error)
	AESCTRDecrypt(context.Context, *AESCTRDecryptReq) (*AESCTRDecryptResp, error)
	// DES
	DESCBCEncrypt(context.Context, *DESCBCEncryptReq) (*DESCBCEncryptResp, error)
	DESCBCDecrypt(context.Context, *DESCBCDecryptReq) (*DESCBCDecryptResp, error)
	DESECBEncrypt(context.Context, *DESECBEncryptReq) (*DESECBEncryptResp, error)
	DESECBDecrypt(context.Context, *DESECBDecryptReq) (*DESECBDecryptResp, error)
	DESCFBEncrypt(context.Context, *DESCFBEncryptReq) (*DESCFBEncryptResp, error)
	DESCFBDecrypt(context.Context, *DESCFBDecryptReq) (*DESCFBDecryptResp, error)
	DESCTREncrypt(context.Context, *DESCTREncryptReq) (*DESCTREncryptResp, error)
	DESCTRDecrypt(context.Context, *DESCTRDecryptReq) (*DESCTRDecryptResp, error)
	// Hmac
	HmacMd5(context.Context, *HmacMd5Req) (*HmacMd5Resp, error)
	HmacSha1(context.Context, *HmacSha1Req) (*HmacSha1Resp, error)
	HmacSha256(context.Context, *HmacSha256Req) (*HmacSha256Resp, error)
	HmacSha512(context.Context, *HmacSha512Req) (*HmacSha512Resp, error)
}

// UnimplementedWordHelperRPCServer can be embedded to have forward compatible implementations.
type UnimplementedWordHelperRPCServer struct {
}

func (*UnimplementedWordHelperRPCServer) FenciJieba(context.Context, *FenciJiebaReq) (*FenciJiebaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FenciJieba not implemented")
}
func (*UnimplementedWordHelperRPCServer) OCR(context.Context, *OCRReq) (*OCRResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OCR not implemented")
}
func (*UnimplementedWordHelperRPCServer) OCRLanguages(context.Context, *OCRLangReq) (*OCRLangResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OCRLanguages not implemented")
}
func (*UnimplementedWordHelperRPCServer) OCRVersion(context.Context, *OCRVersionReq) (*OCRVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OCRVersion not implemented")
}
func (*UnimplementedWordHelperRPCServer) OCRBase64(context.Context, *OCRBase64Req) (*OCRBase64Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OCRBase64 not implemented")
}
func (*UnimplementedWordHelperRPCServer) Fanyi(context.Context, *FanyiReq) (*FanyiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fanyi not implemented")
}
func (*UnimplementedWordHelperRPCServer) PDFTxt(context.Context, *PDFTxtReq) (*PDFTxtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PDFTxt not implemented")
}
func (*UnimplementedWordHelperRPCServer) PDFRow(context.Context, *PDFRowReq) (*RDFRowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PDFRow not implemented")
}
func (*UnimplementedWordHelperRPCServer) PDFTable(context.Context, *PDFTableReq) (*PDFTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PDFTable not implemented")
}
func (*UnimplementedWordHelperRPCServer) Md2Html(context.Context, *Md2HtmlReq) (*Md2HtmlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Md2Html not implemented")
}
func (*UnimplementedWordHelperRPCServer) AESCBCEncrypt(context.Context, *AESCBCEncryptReq) (*AESCBCEncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AESCBCEncrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) AESCBCDecrypt(context.Context, *AESCBCDecryptReq) (*AESCBCDecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AESCBCDecrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) AESECBEncrypt(context.Context, *AESECBEncryptReq) (*AESECBEncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AESECBEncrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) AESECBDecrypt(context.Context, *AESECBDecryptReq) (*AESECBDecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AESECBDecrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) AESCFBEncrypt(context.Context, *AESCFBEncryptReq) (*AESCFBEncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AESCFBEncrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) AESCFBDecrypt(context.Context, *AESCFBDecryptReq) (*AESCFBDecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AESCFBDecrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) AESCTREncrypt(context.Context, *AESCTREncryptReq) (*AESCTREncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AESCTREncrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) AESCTRDecrypt(context.Context, *AESCTRDecryptReq) (*AESCTRDecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AESCTRDecrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) DESCBCEncrypt(context.Context, *DESCBCEncryptReq) (*DESCBCEncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DESCBCEncrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) DESCBCDecrypt(context.Context, *DESCBCDecryptReq) (*DESCBCDecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DESCBCDecrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) DESECBEncrypt(context.Context, *DESECBEncryptReq) (*DESECBEncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DESECBEncrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) DESECBDecrypt(context.Context, *DESECBDecryptReq) (*DESECBDecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DESECBDecrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) DESCFBEncrypt(context.Context, *DESCFBEncryptReq) (*DESCFBEncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DESCFBEncrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) DESCFBDecrypt(context.Context, *DESCFBDecryptReq) (*DESCFBDecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DESCFBDecrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) DESCTREncrypt(context.Context, *DESCTREncryptReq) (*DESCTREncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DESCTREncrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) DESCTRDecrypt(context.Context, *DESCTRDecryptReq) (*DESCTRDecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DESCTRDecrypt not implemented")
}
func (*UnimplementedWordHelperRPCServer) HmacMd5(context.Context, *HmacMd5Req) (*HmacMd5Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HmacMd5 not implemented")
}
func (*UnimplementedWordHelperRPCServer) HmacSha1(context.Context, *HmacSha1Req) (*HmacSha1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HmacSha1 not implemented")
}
func (*UnimplementedWordHelperRPCServer) HmacSha256(context.Context, *HmacSha256Req) (*HmacSha256Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HmacSha256 not implemented")
}
func (*UnimplementedWordHelperRPCServer) HmacSha512(context.Context, *HmacSha512Req) (*HmacSha512Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HmacSha512 not implemented")
}

func RegisterWordHelperRPCServer(s *grpc.Server, srv WordHelperRPCServer) {
	s.RegisterService(&_WordHelperRPC_serviceDesc, srv)
}

func _WordHelperRPC_FenciJieba_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FenciJiebaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).FenciJieba(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/FenciJieba",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).FenciJieba(ctx, req.(*FenciJiebaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_OCR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCRReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).OCR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/OCR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).OCR(ctx, req.(*OCRReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_OCRLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCRLangReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).OCRLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/OCRLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).OCRLanguages(ctx, req.(*OCRLangReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_OCRVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCRVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).OCRVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/OCRVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).OCRVersion(ctx, req.(*OCRVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_OCRBase64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCRBase64Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).OCRBase64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/OCRBase64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).OCRBase64(ctx, req.(*OCRBase64Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_Fanyi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanyiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).Fanyi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/Fanyi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).Fanyi(ctx, req.(*FanyiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_PDFTxt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PDFTxtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).PDFTxt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/PDFTxt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).PDFTxt(ctx, req.(*PDFTxtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_PDFRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PDFRowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).PDFRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/PDFRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).PDFRow(ctx, req.(*PDFRowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_PDFTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PDFTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).PDFTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/PDFTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).PDFTable(ctx, req.(*PDFTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_Md2Html_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Md2HtmlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).Md2Html(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/Md2Html",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).Md2Html(ctx, req.(*Md2HtmlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_AESCBCEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AESCBCEncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).AESCBCEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/AESCBCEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).AESCBCEncrypt(ctx, req.(*AESCBCEncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_AESCBCDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AESCBCDecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).AESCBCDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/AESCBCDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).AESCBCDecrypt(ctx, req.(*AESCBCDecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_AESECBEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AESECBEncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).AESECBEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/AESECBEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).AESECBEncrypt(ctx, req.(*AESECBEncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_AESECBDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AESECBDecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).AESECBDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/AESECBDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).AESECBDecrypt(ctx, req.(*AESECBDecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_AESCFBEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AESCFBEncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).AESCFBEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/AESCFBEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).AESCFBEncrypt(ctx, req.(*AESCFBEncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_AESCFBDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AESCFBDecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).AESCFBDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/AESCFBDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).AESCFBDecrypt(ctx, req.(*AESCFBDecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_AESCTREncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AESCTREncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).AESCTREncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/AESCTREncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).AESCTREncrypt(ctx, req.(*AESCTREncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_AESCTRDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AESCTRDecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).AESCTRDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/AESCTRDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).AESCTRDecrypt(ctx, req.(*AESCTRDecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_DESCBCEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DESCBCEncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).DESCBCEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/DESCBCEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).DESCBCEncrypt(ctx, req.(*DESCBCEncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_DESCBCDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DESCBCDecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).DESCBCDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/DESCBCDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).DESCBCDecrypt(ctx, req.(*DESCBCDecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_DESECBEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DESECBEncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).DESECBEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/DESECBEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).DESECBEncrypt(ctx, req.(*DESECBEncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_DESECBDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DESECBDecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).DESECBDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/DESECBDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).DESECBDecrypt(ctx, req.(*DESECBDecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_DESCFBEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DESCFBEncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).DESCFBEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/DESCFBEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).DESCFBEncrypt(ctx, req.(*DESCFBEncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_DESCFBDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DESCFBDecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).DESCFBDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/DESCFBDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).DESCFBDecrypt(ctx, req.(*DESCFBDecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_DESCTREncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DESCTREncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).DESCTREncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/DESCTREncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).DESCTREncrypt(ctx, req.(*DESCTREncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_DESCTRDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DESCTRDecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).DESCTRDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/DESCTRDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).DESCTRDecrypt(ctx, req.(*DESCTRDecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_HmacMd5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HmacMd5Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).HmacMd5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/HmacMd5",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).HmacMd5(ctx, req.(*HmacMd5Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_HmacSha1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HmacSha1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).HmacSha1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/HmacSha1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).HmacSha1(ctx, req.(*HmacSha1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_HmacSha256_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HmacSha256Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).HmacSha256(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/HmacSha256",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).HmacSha256(ctx, req.(*HmacSha256Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordHelperRPC_HmacSha512_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HmacSha512Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordHelperRPCServer).HmacSha512(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WordHelperRPC/HmacSha512",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordHelperRPCServer).HmacSha512(ctx, req.(*HmacSha512Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _WordHelperRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WordHelperRPC",
	HandlerType: (*WordHelperRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FenciJieba",
			Handler:    _WordHelperRPC_FenciJieba_Handler,
		},
		{
			MethodName: "OCR",
			Handler:    _WordHelperRPC_OCR_Handler,
		},
		{
			MethodName: "OCRLanguages",
			Handler:    _WordHelperRPC_OCRLanguages_Handler,
		},
		{
			MethodName: "OCRVersion",
			Handler:    _WordHelperRPC_OCRVersion_Handler,
		},
		{
			MethodName: "OCRBase64",
			Handler:    _WordHelperRPC_OCRBase64_Handler,
		},
		{
			MethodName: "Fanyi",
			Handler:    _WordHelperRPC_Fanyi_Handler,
		},
		{
			MethodName: "PDFTxt",
			Handler:    _WordHelperRPC_PDFTxt_Handler,
		},
		{
			MethodName: "PDFRow",
			Handler:    _WordHelperRPC_PDFRow_Handler,
		},
		{
			MethodName: "PDFTable",
			Handler:    _WordHelperRPC_PDFTable_Handler,
		},
		{
			MethodName: "Md2Html",
			Handler:    _WordHelperRPC_Md2Html_Handler,
		},
		{
			MethodName: "AESCBCEncrypt",
			Handler:    _WordHelperRPC_AESCBCEncrypt_Handler,
		},
		{
			MethodName: "AESCBCDecrypt",
			Handler:    _WordHelperRPC_AESCBCDecrypt_Handler,
		},
		{
			MethodName: "AESECBEncrypt",
			Handler:    _WordHelperRPC_AESECBEncrypt_Handler,
		},
		{
			MethodName: "AESECBDecrypt",
			Handler:    _WordHelperRPC_AESECBDecrypt_Handler,
		},
		{
			MethodName: "AESCFBEncrypt",
			Handler:    _WordHelperRPC_AESCFBEncrypt_Handler,
		},
		{
			MethodName: "AESCFBDecrypt",
			Handler:    _WordHelperRPC_AESCFBDecrypt_Handler,
		},
		{
			MethodName: "AESCTREncrypt",
			Handler:    _WordHelperRPC_AESCTREncrypt_Handler,
		},
		{
			MethodName: "AESCTRDecrypt",
			Handler:    _WordHelperRPC_AESCTRDecrypt_Handler,
		},
		{
			MethodName: "DESCBCEncrypt",
			Handler:    _WordHelperRPC_DESCBCEncrypt_Handler,
		},
		{
			MethodName: "DESCBCDecrypt",
			Handler:    _WordHelperRPC_DESCBCDecrypt_Handler,
		},
		{
			MethodName: "DESECBEncrypt",
			Handler:    _WordHelperRPC_DESECBEncrypt_Handler,
		},
		{
			MethodName: "DESECBDecrypt",
			Handler:    _WordHelperRPC_DESECBDecrypt_Handler,
		},
		{
			MethodName: "DESCFBEncrypt",
			Handler:    _WordHelperRPC_DESCFBEncrypt_Handler,
		},
		{
			MethodName: "DESCFBDecrypt",
			Handler:    _WordHelperRPC_DESCFBDecrypt_Handler,
		},
		{
			MethodName: "DESCTREncrypt",
			Handler:    _WordHelperRPC_DESCTREncrypt_Handler,
		},
		{
			MethodName: "DESCTRDecrypt",
			Handler:    _WordHelperRPC_DESCTRDecrypt_Handler,
		},
		{
			MethodName: "HmacMd5",
			Handler:    _WordHelperRPC_HmacMd5_Handler,
		},
		{
			MethodName: "HmacSha1",
			Handler:    _WordHelperRPC_HmacSha1_Handler,
		},
		{
			MethodName: "HmacSha256",
			Handler:    _WordHelperRPC_HmacSha256_Handler,
		},
		{
			MethodName: "HmacSha512",
			Handler:    _WordHelperRPC_HmacSha512_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wordhelper.proto",
}
