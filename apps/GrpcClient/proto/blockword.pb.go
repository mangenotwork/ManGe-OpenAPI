// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockword.proto

package proto // import "/proto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 执行屏蔽词
type DoReq struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Sub                  string   `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoReq) Reset()         { *m = DoReq{} }
func (m *DoReq) String() string { return proto.CompactTextString(m) }
func (*DoReq) ProtoMessage()    {}
func (*DoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{0}
}
func (m *DoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoReq.Unmarshal(m, b)
}
func (m *DoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoReq.Marshal(b, m, deterministic)
}
func (dst *DoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoReq.Merge(dst, src)
}
func (m *DoReq) XXX_Size() int {
	return xxx_messageInfo_DoReq.Size(m)
}
func (m *DoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DoReq.DiscardUnknown(m)
}

var xxx_messageInfo_DoReq proto.InternalMessageInfo

func (m *DoReq) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *DoReq) GetSub() string {
	if m != nil {
		return m.Sub
	}
	return ""
}

type DoResp struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Sub                  string   `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	Time                 string   `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoResp) Reset()         { *m = DoResp{} }
func (m *DoResp) String() string { return proto.CompactTextString(m) }
func (*DoResp) ProtoMessage()    {}
func (*DoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{1}
}
func (m *DoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoResp.Unmarshal(m, b)
}
func (m *DoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoResp.Marshal(b, m, deterministic)
}
func (dst *DoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoResp.Merge(dst, src)
}
func (m *DoResp) XXX_Size() int {
	return xxx_messageInfo_DoResp.Size(m)
}
func (m *DoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DoResp.DiscardUnknown(m)
}

var xxx_messageInfo_DoResp proto.InternalMessageInfo

func (m *DoResp) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *DoResp) GetSub() string {
	if m != nil {
		return m.Sub
	}
	return ""
}

func (m *DoResp) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

// 添加屏蔽词
type AddReq struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddReq) Reset()         { *m = AddReq{} }
func (m *AddReq) String() string { return proto.CompactTextString(m) }
func (*AddReq) ProtoMessage()    {}
func (*AddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{2}
}
func (m *AddReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddReq.Unmarshal(m, b)
}
func (m *AddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddReq.Marshal(b, m, deterministic)
}
func (dst *AddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReq.Merge(dst, src)
}
func (m *AddReq) XXX_Size() int {
	return xxx_messageInfo_AddReq.Size(m)
}
func (m *AddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddReq proto.InternalMessageInfo

func (m *AddReq) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type AddResp struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddResp) Reset()         { *m = AddResp{} }
func (m *AddResp) String() string { return proto.CompactTextString(m) }
func (*AddResp) ProtoMessage()    {}
func (*AddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{3}
}
func (m *AddResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddResp.Unmarshal(m, b)
}
func (m *AddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddResp.Marshal(b, m, deterministic)
}
func (dst *AddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddResp.Merge(dst, src)
}
func (m *AddResp) XXX_Size() int {
	return xxx_messageInfo_AddResp.Size(m)
}
func (m *AddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddResp proto.InternalMessageInfo

func (m *AddResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AddResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 删除屏蔽词
type DelReq struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelReq) Reset()         { *m = DelReq{} }
func (m *DelReq) String() string { return proto.CompactTextString(m) }
func (*DelReq) ProtoMessage()    {}
func (*DelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{4}
}
func (m *DelReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelReq.Unmarshal(m, b)
}
func (m *DelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelReq.Marshal(b, m, deterministic)
}
func (dst *DelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelReq.Merge(dst, src)
}
func (m *DelReq) XXX_Size() int {
	return xxx_messageInfo_DelReq.Size(m)
}
func (m *DelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelReq proto.InternalMessageInfo

func (m *DelReq) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type DelResp struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelResp) Reset()         { *m = DelResp{} }
func (m *DelResp) String() string { return proto.CompactTextString(m) }
func (*DelResp) ProtoMessage()    {}
func (*DelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{5}
}
func (m *DelResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelResp.Unmarshal(m, b)
}
func (m *DelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelResp.Marshal(b, m, deterministic)
}
func (dst *DelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelResp.Merge(dst, src)
}
func (m *DelResp) XXX_Size() int {
	return xxx_messageInfo_DelResp.Size(m)
}
func (m *DelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DelResp.DiscardUnknown(m)
}

var xxx_messageInfo_DelResp proto.InternalMessageInfo

func (m *DelResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DelResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 查看屏蔽词
type GetReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReq) Reset()         { *m = GetReq{} }
func (m *GetReq) String() string { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()    {}
func (*GetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{6}
}
func (m *GetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReq.Unmarshal(m, b)
}
func (m *GetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReq.Marshal(b, m, deterministic)
}
func (dst *GetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReq.Merge(dst, src)
}
func (m *GetReq) XXX_Size() int {
	return xxx_messageInfo_GetReq.Size(m)
}
func (m *GetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReq proto.InternalMessageInfo

type GetResp struct {
	List                 []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResp) Reset()         { *m = GetResp{} }
func (m *GetResp) String() string { return proto.CompactTextString(m) }
func (*GetResp) ProtoMessage()    {}
func (*GetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{7}
}
func (m *GetResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResp.Unmarshal(m, b)
}
func (m *GetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResp.Marshal(b, m, deterministic)
}
func (dst *GetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResp.Merge(dst, src)
}
func (m *GetResp) XXX_Size() int {
	return xxx_messageInfo_GetResp.Size(m)
}
func (m *GetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetResp proto.InternalMessageInfo

func (m *GetResp) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

// 添加白名单词语
type WhiteWordAddReq struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhiteWordAddReq) Reset()         { *m = WhiteWordAddReq{} }
func (m *WhiteWordAddReq) String() string { return proto.CompactTextString(m) }
func (*WhiteWordAddReq) ProtoMessage()    {}
func (*WhiteWordAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{8}
}
func (m *WhiteWordAddReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhiteWordAddReq.Unmarshal(m, b)
}
func (m *WhiteWordAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhiteWordAddReq.Marshal(b, m, deterministic)
}
func (dst *WhiteWordAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteWordAddReq.Merge(dst, src)
}
func (m *WhiteWordAddReq) XXX_Size() int {
	return xxx_messageInfo_WhiteWordAddReq.Size(m)
}
func (m *WhiteWordAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteWordAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteWordAddReq proto.InternalMessageInfo

func (m *WhiteWordAddReq) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type WhiteWordAddResp struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhiteWordAddResp) Reset()         { *m = WhiteWordAddResp{} }
func (m *WhiteWordAddResp) String() string { return proto.CompactTextString(m) }
func (*WhiteWordAddResp) ProtoMessage()    {}
func (*WhiteWordAddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{9}
}
func (m *WhiteWordAddResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhiteWordAddResp.Unmarshal(m, b)
}
func (m *WhiteWordAddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhiteWordAddResp.Marshal(b, m, deterministic)
}
func (dst *WhiteWordAddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteWordAddResp.Merge(dst, src)
}
func (m *WhiteWordAddResp) XXX_Size() int {
	return xxx_messageInfo_WhiteWordAddResp.Size(m)
}
func (m *WhiteWordAddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteWordAddResp.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteWordAddResp proto.InternalMessageInfo

func (m *WhiteWordAddResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WhiteWordAddResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 删除白名单词语
type WhiteWordDelReq struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhiteWordDelReq) Reset()         { *m = WhiteWordDelReq{} }
func (m *WhiteWordDelReq) String() string { return proto.CompactTextString(m) }
func (*WhiteWordDelReq) ProtoMessage()    {}
func (*WhiteWordDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{10}
}
func (m *WhiteWordDelReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhiteWordDelReq.Unmarshal(m, b)
}
func (m *WhiteWordDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhiteWordDelReq.Marshal(b, m, deterministic)
}
func (dst *WhiteWordDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteWordDelReq.Merge(dst, src)
}
func (m *WhiteWordDelReq) XXX_Size() int {
	return xxx_messageInfo_WhiteWordDelReq.Size(m)
}
func (m *WhiteWordDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteWordDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteWordDelReq proto.InternalMessageInfo

func (m *WhiteWordDelReq) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type WhiteWordDelResp struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhiteWordDelResp) Reset()         { *m = WhiteWordDelResp{} }
func (m *WhiteWordDelResp) String() string { return proto.CompactTextString(m) }
func (*WhiteWordDelResp) ProtoMessage()    {}
func (*WhiteWordDelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{11}
}
func (m *WhiteWordDelResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhiteWordDelResp.Unmarshal(m, b)
}
func (m *WhiteWordDelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhiteWordDelResp.Marshal(b, m, deterministic)
}
func (dst *WhiteWordDelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteWordDelResp.Merge(dst, src)
}
func (m *WhiteWordDelResp) XXX_Size() int {
	return xxx_messageInfo_WhiteWordDelResp.Size(m)
}
func (m *WhiteWordDelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteWordDelResp.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteWordDelResp proto.InternalMessageInfo

func (m *WhiteWordDelResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WhiteWordDelResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 查看白名单词语
type WhiteWordGetReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhiteWordGetReq) Reset()         { *m = WhiteWordGetReq{} }
func (m *WhiteWordGetReq) String() string { return proto.CompactTextString(m) }
func (*WhiteWordGetReq) ProtoMessage()    {}
func (*WhiteWordGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{12}
}
func (m *WhiteWordGetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhiteWordGetReq.Unmarshal(m, b)
}
func (m *WhiteWordGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhiteWordGetReq.Marshal(b, m, deterministic)
}
func (dst *WhiteWordGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteWordGetReq.Merge(dst, src)
}
func (m *WhiteWordGetReq) XXX_Size() int {
	return xxx_messageInfo_WhiteWordGetReq.Size(m)
}
func (m *WhiteWordGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteWordGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteWordGetReq proto.InternalMessageInfo

type WhiteWordGetResp struct {
	List                 []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhiteWordGetResp) Reset()         { *m = WhiteWordGetResp{} }
func (m *WhiteWordGetResp) String() string { return proto.CompactTextString(m) }
func (*WhiteWordGetResp) ProtoMessage()    {}
func (*WhiteWordGetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{13}
}
func (m *WhiteWordGetResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhiteWordGetResp.Unmarshal(m, b)
}
func (m *WhiteWordGetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhiteWordGetResp.Marshal(b, m, deterministic)
}
func (dst *WhiteWordGetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteWordGetResp.Merge(dst, src)
}
func (m *WhiteWordGetResp) XXX_Size() int {
	return xxx_messageInfo_WhiteWordGetResp.Size(m)
}
func (m *WhiteWordGetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteWordGetResp.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteWordGetResp proto.InternalMessageInfo

func (m *WhiteWordGetResp) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

// 是否存在非法词
type IsHaveReq struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsHaveReq) Reset()         { *m = IsHaveReq{} }
func (m *IsHaveReq) String() string { return proto.CompactTextString(m) }
func (*IsHaveReq) ProtoMessage()    {}
func (*IsHaveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{14}
}
func (m *IsHaveReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsHaveReq.Unmarshal(m, b)
}
func (m *IsHaveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsHaveReq.Marshal(b, m, deterministic)
}
func (dst *IsHaveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsHaveReq.Merge(dst, src)
}
func (m *IsHaveReq) XXX_Size() int {
	return xxx_messageInfo_IsHaveReq.Size(m)
}
func (m *IsHaveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsHaveReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsHaveReq proto.InternalMessageInfo

func (m *IsHaveReq) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type IsHaveResp struct {
	IsHave               int32    `protobuf:"varint,1,opt,name=isHave,proto3" json:"isHave,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsHaveResp) Reset()         { *m = IsHaveResp{} }
func (m *IsHaveResp) String() string { return proto.CompactTextString(m) }
func (*IsHaveResp) ProtoMessage()    {}
func (*IsHaveResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{15}
}
func (m *IsHaveResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsHaveResp.Unmarshal(m, b)
}
func (m *IsHaveResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsHaveResp.Marshal(b, m, deterministic)
}
func (dst *IsHaveResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsHaveResp.Merge(dst, src)
}
func (m *IsHaveResp) XXX_Size() int {
	return xxx_messageInfo_IsHaveResp.Size(m)
}
func (m *IsHaveResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsHaveResp.DiscardUnknown(m)
}

var xxx_messageInfo_IsHaveResp proto.InternalMessageInfo

func (m *IsHaveResp) GetIsHave() int32 {
	if m != nil {
		return m.IsHave
	}
	return 0
}

// 是否存在非法词并返回
type IsHaveListReq struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsHaveListReq) Reset()         { *m = IsHaveListReq{} }
func (m *IsHaveListReq) String() string { return proto.CompactTextString(m) }
func (*IsHaveListReq) ProtoMessage()    {}
func (*IsHaveListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{16}
}
func (m *IsHaveListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsHaveListReq.Unmarshal(m, b)
}
func (m *IsHaveListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsHaveListReq.Marshal(b, m, deterministic)
}
func (dst *IsHaveListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsHaveListReq.Merge(dst, src)
}
func (m *IsHaveListReq) XXX_Size() int {
	return xxx_messageInfo_IsHaveListReq.Size(m)
}
func (m *IsHaveListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsHaveListReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsHaveListReq proto.InternalMessageInfo

func (m *IsHaveListReq) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type IsHaveListResp struct {
	IsHave               int32    `protobuf:"varint,1,opt,name=isHave,proto3" json:"isHave,omitempty"`
	List                 []string `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsHaveListResp) Reset()         { *m = IsHaveListResp{} }
func (m *IsHaveListResp) String() string { return proto.CompactTextString(m) }
func (*IsHaveListResp) ProtoMessage()    {}
func (*IsHaveListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockword_67bc8c206da59cec, []int{17}
}
func (m *IsHaveListResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsHaveListResp.Unmarshal(m, b)
}
func (m *IsHaveListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsHaveListResp.Marshal(b, m, deterministic)
}
func (dst *IsHaveListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsHaveListResp.Merge(dst, src)
}
func (m *IsHaveListResp) XXX_Size() int {
	return xxx_messageInfo_IsHaveListResp.Size(m)
}
func (m *IsHaveListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsHaveListResp.DiscardUnknown(m)
}

var xxx_messageInfo_IsHaveListResp proto.InternalMessageInfo

func (m *IsHaveListResp) GetIsHave() int32 {
	if m != nil {
		return m.IsHave
	}
	return 0
}

func (m *IsHaveListResp) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*DoReq)(nil), "pb.DoReq")
	proto.RegisterType((*DoResp)(nil), "pb.DoResp")
	proto.RegisterType((*AddReq)(nil), "pb.AddReq")
	proto.RegisterType((*AddResp)(nil), "pb.AddResp")
	proto.RegisterType((*DelReq)(nil), "pb.DelReq")
	proto.RegisterType((*DelResp)(nil), "pb.DelResp")
	proto.RegisterType((*GetReq)(nil), "pb.GetReq")
	proto.RegisterType((*GetResp)(nil), "pb.GetResp")
	proto.RegisterType((*WhiteWordAddReq)(nil), "pb.WhiteWordAddReq")
	proto.RegisterType((*WhiteWordAddResp)(nil), "pb.WhiteWordAddResp")
	proto.RegisterType((*WhiteWordDelReq)(nil), "pb.WhiteWordDelReq")
	proto.RegisterType((*WhiteWordDelResp)(nil), "pb.WhiteWordDelResp")
	proto.RegisterType((*WhiteWordGetReq)(nil), "pb.WhiteWordGetReq")
	proto.RegisterType((*WhiteWordGetResp)(nil), "pb.WhiteWordGetResp")
	proto.RegisterType((*IsHaveReq)(nil), "pb.IsHaveReq")
	proto.RegisterType((*IsHaveResp)(nil), "pb.IsHaveResp")
	proto.RegisterType((*IsHaveListReq)(nil), "pb.IsHaveListReq")
	proto.RegisterType((*IsHaveListResp)(nil), "pb.IsHaveListResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageRPCClient is the client API for MessageRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageRPCClient interface {
	Do(ctx context.Context, in *DoReq, opts ...grpc.CallOption) (*DoResp, error)
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
	Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelResp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	WhiteWordAdd(ctx context.Context, in *WhiteWordAddReq, opts ...grpc.CallOption) (*WhiteWordAddResp, error)
	WhiteWordDel(ctx context.Context, in *WhiteWordDelReq, opts ...grpc.CallOption) (*WhiteWordDelResp, error)
	WhiteWordGet(ctx context.Context, in *WhiteWordGetReq, opts ...grpc.CallOption) (*WhiteWordGetResp, error)
	IsHave(ctx context.Context, in *IsHaveReq, opts ...grpc.CallOption) (*IsHaveResp, error)
	IsHaveList(ctx context.Context, in *IsHaveListReq, opts ...grpc.CallOption) (*IsHaveListResp, error)
}

type messageRPCClient struct {
	cc *grpc.ClientConn
}

func NewMessageRPCClient(cc *grpc.ClientConn) MessageRPCClient {
	return &messageRPCClient{cc}
}

func (c *messageRPCClient) Do(ctx context.Context, in *DoReq, opts ...grpc.CallOption) (*DoResp, error) {
	out := new(DoResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelResp, error) {
	out := new(DelResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) WhiteWordAdd(ctx context.Context, in *WhiteWordAddReq, opts ...grpc.CallOption) (*WhiteWordAddResp, error) {
	out := new(WhiteWordAddResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/WhiteWordAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) WhiteWordDel(ctx context.Context, in *WhiteWordDelReq, opts ...grpc.CallOption) (*WhiteWordDelResp, error) {
	out := new(WhiteWordDelResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/WhiteWordDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) WhiteWordGet(ctx context.Context, in *WhiteWordGetReq, opts ...grpc.CallOption) (*WhiteWordGetResp, error) {
	out := new(WhiteWordGetResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/WhiteWordGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) IsHave(ctx context.Context, in *IsHaveReq, opts ...grpc.CallOption) (*IsHaveResp, error) {
	out := new(IsHaveResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/IsHave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) IsHaveList(ctx context.Context, in *IsHaveListReq, opts ...grpc.CallOption) (*IsHaveListResp, error) {
	out := new(IsHaveListResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/IsHaveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageRPCServer is the server API for MessageRPC service.
type MessageRPCServer interface {
	Do(context.Context, *DoReq) (*DoResp, error)
	Add(context.Context, *AddReq) (*AddResp, error)
	Del(context.Context, *DelReq) (*DelResp, error)
	Get(context.Context, *GetReq) (*GetResp, error)
	WhiteWordAdd(context.Context, *WhiteWordAddReq) (*WhiteWordAddResp, error)
	WhiteWordDel(context.Context, *WhiteWordDelReq) (*WhiteWordDelResp, error)
	WhiteWordGet(context.Context, *WhiteWordGetReq) (*WhiteWordGetResp, error)
	IsHave(context.Context, *IsHaveReq) (*IsHaveResp, error)
	IsHaveList(context.Context, *IsHaveListReq) (*IsHaveListResp, error)
}

func RegisterMessageRPCServer(s *grpc.Server, srv MessageRPCServer) {
	s.RegisterService(&_MessageRPC_serviceDesc, srv)
}

func _MessageRPC_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).Do(ctx, req.(*DoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).Del(ctx, req.(*DelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_WhiteWordAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteWordAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).WhiteWordAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/WhiteWordAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).WhiteWordAdd(ctx, req.(*WhiteWordAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_WhiteWordDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteWordDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).WhiteWordDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/WhiteWordDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).WhiteWordDel(ctx, req.(*WhiteWordDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_WhiteWordGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteWordGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).WhiteWordGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/WhiteWordGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).WhiteWordGet(ctx, req.(*WhiteWordGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_IsHave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsHaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).IsHave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/IsHave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).IsHave(ctx, req.(*IsHaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_IsHaveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsHaveListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).IsHaveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/IsHaveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).IsHaveList(ctx, req.(*IsHaveListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MessageRPC",
	HandlerType: (*MessageRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _MessageRPC_Do_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _MessageRPC_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _MessageRPC_Del_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MessageRPC_Get_Handler,
		},
		{
			MethodName: "WhiteWordAdd",
			Handler:    _MessageRPC_WhiteWordAdd_Handler,
		},
		{
			MethodName: "WhiteWordDel",
			Handler:    _MessageRPC_WhiteWordDel_Handler,
		},
		{
			MethodName: "WhiteWordGet",
			Handler:    _MessageRPC_WhiteWordGet_Handler,
		},
		{
			MethodName: "IsHave",
			Handler:    _MessageRPC_IsHave_Handler,
		},
		{
			MethodName: "IsHaveList",
			Handler:    _MessageRPC_IsHaveList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockword.proto",
}

func init() { proto.RegisterFile("blockword.proto", fileDescriptor_blockword_67bc8c206da59cec) }

var fileDescriptor_blockword_67bc8c206da59cec = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0xca, 0xda, 0x40,
	0x10, 0xc5, 0x44, 0xa3, 0x4e, 0xeb, 0xdf, 0x54, 0x4a, 0x48, 0xab, 0xd8, 0xa5, 0x7f, 0x50, 0x50,
	0xa8, 0x37, 0x2d, 0xf4, 0xa2, 0xb6, 0x01, 0x5b, 0x68, 0xa1, 0xe4, 0x46, 0xe8, 0x9d, 0x31, 0x8b,
	0x0d, 0x8d, 0xec, 0x9a, 0x5d, 0xdb, 0x57, 0xe9, 0xe3, 0x96, 0xdd, 0x4d, 0x34, 0x46, 0xbf, 0xe0,
	0x77, 0x95, 0xd9, 0x73, 0x66, 0xce, 0x9c, 0xd9, 0x59, 0x02, 0xbd, 0x30, 0x61, 0x9b, 0xdf, 0x7f,
	0x59, 0x1a, 0x4d, 0x79, 0xca, 0x24, 0x43, 0x8b, 0x87, 0xe4, 0x0d, 0x34, 0x7c, 0x16, 0xd0, 0x3d,
	0xf6, 0xc1, 0x16, 0x32, 0x75, 0x6b, 0x93, 0xda, 0xeb, 0x76, 0xa0, 0x42, 0x8d, 0x1c, 0x42, 0xd7,
	0xca, 0x90, 0x43, 0x48, 0x3e, 0x82, 0xa3, 0x92, 0x05, 0xbf, 0x25, 0x1b, 0x11, 0xea, 0x32, 0xde,
	0x51, 0xd7, 0xd6, 0x90, 0x8e, 0xc9, 0x53, 0x70, 0x16, 0x51, 0xa4, 0xfa, 0x21, 0xd4, 0x95, 0x95,
	0x4c, 0x42, 0xc7, 0x64, 0x06, 0x4d, 0xcd, 0x0a, 0xae, 0xe8, 0x0d, 0x8b, 0xa8, 0xa6, 0xed, 0x40,
	0xc7, 0xaa, 0xc5, 0x4e, 0x6c, 0xf3, 0x16, 0x3b, 0xb1, 0x55, 0x72, 0x3e, 0x4d, 0x2a, 0xe4, 0x34,
	0x7b, 0xb3, 0x5c, 0x0b, 0x9c, 0x25, 0x95, 0x01, 0xdd, 0x93, 0x11, 0x34, 0x75, 0x64, 0x4a, 0x93,
	0x58, 0x48, 0xb7, 0x36, 0xb1, 0x95, 0xb2, 0x8a, 0xc9, 0x0b, 0xe8, 0xad, 0x7e, 0xc5, 0x92, 0xae,
	0x58, 0x1a, 0x55, 0xcc, 0xf3, 0x0e, 0xfa, 0xe7, 0x69, 0x37, 0x3b, 0x29, 0x36, 0xa8, 0x98, 0xb0,
	0xd8, 0xe0, 0x7e, 0xa3, 0x0e, 0x0a, 0x0d, 0xb2, 0x99, 0x5f, 0x16, 0xc4, 0xaa, 0x86, 0x1f, 0x41,
	0xfb, 0xab, 0xf8, 0xb2, 0xfe, 0x43, 0xaf, 0x3e, 0x1b, 0xf2, 0x1c, 0x20, 0xa7, 0x05, 0xc7, 0xc7,
	0xe0, 0xc4, 0xfa, 0xa4, 0x53, 0x1a, 0x41, 0x76, 0x22, 0xcf, 0xa0, 0x63, 0xb2, 0xbe, 0xc5, 0x42,
	0x5e, 0x17, 0xfa, 0x00, 0xdd, 0x62, 0xca, 0xdd, 0x62, 0x47, 0x97, 0xd6, 0xc9, 0xe5, 0xdb, 0x7f,
	0x36, 0xc0, 0x77, 0x2a, 0xc4, 0x7a, 0x4b, 0x83, 0x1f, 0x9f, 0xf1, 0x09, 0x58, 0x3e, 0xc3, 0xf6,
	0x94, 0x87, 0x53, 0xfd, 0xde, 0x3d, 0xc8, 0x43, 0xc1, 0x71, 0x0c, 0xf6, 0x22, 0x8a, 0x50, 0x43,
	0x66, 0x9d, 0xde, 0x83, 0x63, 0x6c, 0x78, 0x9f, 0x26, 0x86, 0x37, 0xdb, 0x30, 0x7c, 0x7e, 0xe5,
	0x63, 0xb0, 0x97, 0x54, 0x1a, 0xde, 0x5c, 0xa6, 0xe1, 0xf3, 0x5b, 0x7c, 0x0f, 0x0f, 0x8b, 0xef,
	0x00, 0x1f, 0x29, 0xb2, 0xf4, 0x80, 0xbc, 0xe1, 0x25, 0x58, 0x2a, 0x55, 0x1e, 0xce, 0x4b, 0x33,
	0x33, 0xc3, 0x4b, 0xb0, 0x54, 0xaa, 0xec, 0x9d, 0x97, 0x66, 0x3e, 0x87, 0x97, 0xa0, 0xe0, 0xf8,
	0x0a, 0x1c, 0x73, 0xf5, 0xd8, 0x51, 0xfc, 0x71, 0xdd, 0x5e, 0xb7, 0x78, 0x14, 0x1c, 0xe7, 0xf9,
	0xb2, 0xd5, 0x8e, 0x70, 0x70, 0x62, 0xb3, 0xb5, 0x7a, 0x58, 0x86, 0x04, 0xff, 0xd4, 0xfa, 0xe9,
	0xcc, 0xf4, 0x1f, 0x28, 0x74, 0xf4, 0x67, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x16, 0x1f, 0x49,
	0xbc, 0x9b, 0x04, 0x00, 0x00,
}
