// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: blockword.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 执行屏蔽词
type DoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Sub string `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *DoReq) Reset() {
	*x = DoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoReq) ProtoMessage() {}

func (x *DoReq) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoReq.ProtoReflect.Descriptor instead.
func (*DoReq) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{0}
}

func (x *DoReq) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *DoReq) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

type DoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str  string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Sub  string `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	Time string `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DoResp) Reset() {
	*x = DoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoResp) ProtoMessage() {}

func (x *DoResp) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoResp.ProtoReflect.Descriptor instead.
func (*DoResp) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{1}
}

func (x *DoResp) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *DoResp) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *DoResp) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 添加屏蔽词
type AddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
}

func (x *AddReq) Reset() {
	*x = AddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReq) ProtoMessage() {}

func (x *AddReq) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReq.ProtoReflect.Descriptor instead.
func (*AddReq) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{2}
}

func (x *AddReq) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

type AddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *AddResp) Reset() {
	*x = AddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResp) ProtoMessage() {}

func (x *AddResp) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResp.ProtoReflect.Descriptor instead.
func (*AddResp) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{3}
}

func (x *AddResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 删除屏蔽词
type DelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
}

func (x *DelReq) Reset() {
	*x = DelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelReq) ProtoMessage() {}

func (x *DelReq) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelReq.ProtoReflect.Descriptor instead.
func (*DelReq) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{4}
}

func (x *DelReq) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

type DelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DelResp) Reset() {
	*x = DelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelResp) ProtoMessage() {}

func (x *DelResp) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelResp.ProtoReflect.Descriptor instead.
func (*DelResp) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{5}
}

func (x *DelResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 查看屏蔽词
type GetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetReq) Reset() {
	*x = GetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReq) ProtoMessage() {}

func (x *GetReq) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReq.ProtoReflect.Descriptor instead.
func (*GetReq) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{6}
}

type GetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetResp) Reset() {
	*x = GetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResp) ProtoMessage() {}

func (x *GetResp) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResp.ProtoReflect.Descriptor instead.
func (*GetResp) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{7}
}

func (x *GetResp) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加白名单词语
type WhiteWordAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
}

func (x *WhiteWordAddReq) Reset() {
	*x = WhiteWordAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteWordAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteWordAddReq) ProtoMessage() {}

func (x *WhiteWordAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhiteWordAddReq.ProtoReflect.Descriptor instead.
func (*WhiteWordAddReq) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{8}
}

func (x *WhiteWordAddReq) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

type WhiteWordAddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *WhiteWordAddResp) Reset() {
	*x = WhiteWordAddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteWordAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteWordAddResp) ProtoMessage() {}

func (x *WhiteWordAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhiteWordAddResp.ProtoReflect.Descriptor instead.
func (*WhiteWordAddResp) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{9}
}

func (x *WhiteWordAddResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WhiteWordAddResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 删除白名单词语
type WhiteWordDelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
}

func (x *WhiteWordDelReq) Reset() {
	*x = WhiteWordDelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteWordDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteWordDelReq) ProtoMessage() {}

func (x *WhiteWordDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhiteWordDelReq.ProtoReflect.Descriptor instead.
func (*WhiteWordDelReq) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{10}
}

func (x *WhiteWordDelReq) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

type WhiteWordDelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *WhiteWordDelResp) Reset() {
	*x = WhiteWordDelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteWordDelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteWordDelResp) ProtoMessage() {}

func (x *WhiteWordDelResp) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhiteWordDelResp.ProtoReflect.Descriptor instead.
func (*WhiteWordDelResp) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{11}
}

func (x *WhiteWordDelResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WhiteWordDelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 查看白名单词语
type WhiteWordGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WhiteWordGetReq) Reset() {
	*x = WhiteWordGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteWordGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteWordGetReq) ProtoMessage() {}

func (x *WhiteWordGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhiteWordGetReq.ProtoReflect.Descriptor instead.
func (*WhiteWordGetReq) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{12}
}

type WhiteWordGetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WhiteWordGetResp) Reset() {
	*x = WhiteWordGetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockword_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteWordGetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteWordGetResp) ProtoMessage() {}

func (x *WhiteWordGetResp) ProtoReflect() protoreflect.Message {
	mi := &file_blockword_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhiteWordGetResp.ProtoReflect.Descriptor instead.
func (*WhiteWordGetResp) Descriptor() ([]byte, []int) {
	return file_blockword_proto_rawDescGZIP(), []int{13}
}

func (x *WhiteWordGetResp) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

var File_blockword_proto protoreflect.FileDescriptor

var file_blockword_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x2b, 0x0a, 0x05, 0x44, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x75, 0x62, 0x22, 0x40, 0x0a, 0x06, 0x44, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x2f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x1c, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x2f, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x08, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x22, 0x1d, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x0f, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x38, 0x0a, 0x10, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x25, 0x0a, 0x0f,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x38, 0x0a, 0x10, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x11, 0x0a,
	0x0f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x22, 0x26, 0x0a, 0x10, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32, 0xba, 0x02, 0x0a, 0x0a, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x50, 0x43, 0x12, 0x1b, 0x0a, 0x02, 0x44, 0x6f, 0x12, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x03, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x64, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x0c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x12,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blockword_proto_rawDescOnce sync.Once
	file_blockword_proto_rawDescData = file_blockword_proto_rawDesc
)

func file_blockword_proto_rawDescGZIP() []byte {
	file_blockword_proto_rawDescOnce.Do(func() {
		file_blockword_proto_rawDescData = protoimpl.X.CompressGZIP(file_blockword_proto_rawDescData)
	})
	return file_blockword_proto_rawDescData
}

var file_blockword_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_blockword_proto_goTypes = []interface{}{
	(*DoReq)(nil),            // 0: pb.DoReq
	(*DoResp)(nil),           // 1: pb.DoResp
	(*AddReq)(nil),           // 2: pb.AddReq
	(*AddResp)(nil),          // 3: pb.AddResp
	(*DelReq)(nil),           // 4: pb.DelReq
	(*DelResp)(nil),          // 5: pb.DelResp
	(*GetReq)(nil),           // 6: pb.GetReq
	(*GetResp)(nil),          // 7: pb.GetResp
	(*WhiteWordAddReq)(nil),  // 8: pb.WhiteWordAddReq
	(*WhiteWordAddResp)(nil), // 9: pb.WhiteWordAddResp
	(*WhiteWordDelReq)(nil),  // 10: pb.WhiteWordDelReq
	(*WhiteWordDelResp)(nil), // 11: pb.WhiteWordDelResp
	(*WhiteWordGetReq)(nil),  // 12: pb.WhiteWordGetReq
	(*WhiteWordGetResp)(nil), // 13: pb.WhiteWordGetResp
}
var file_blockword_proto_depIdxs = []int32{
	0,  // 0: pb.MessageRPC.Do:input_type -> pb.DoReq
	2,  // 1: pb.MessageRPC.Add:input_type -> pb.AddReq
	4,  // 2: pb.MessageRPC.Del:input_type -> pb.DelReq
	6,  // 3: pb.MessageRPC.Get:input_type -> pb.GetReq
	8,  // 4: pb.MessageRPC.WhiteWordAdd:input_type -> pb.WhiteWordAddReq
	10, // 5: pb.MessageRPC.WhiteWordDel:input_type -> pb.WhiteWordDelReq
	12, // 6: pb.MessageRPC.WhiteWordGet:input_type -> pb.WhiteWordGetReq
	1,  // 7: pb.MessageRPC.Do:output_type -> pb.DoResp
	3,  // 8: pb.MessageRPC.Add:output_type -> pb.AddResp
	5,  // 9: pb.MessageRPC.Del:output_type -> pb.DelResp
	7,  // 10: pb.MessageRPC.Get:output_type -> pb.GetResp
	9,  // 11: pb.MessageRPC.WhiteWordAdd:output_type -> pb.WhiteWordAddResp
	11, // 12: pb.MessageRPC.WhiteWordDel:output_type -> pb.WhiteWordDelResp
	13, // 13: pb.MessageRPC.WhiteWordGet:output_type -> pb.WhiteWordGetResp
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_blockword_proto_init() }
func file_blockword_proto_init() {
	if File_blockword_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blockword_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteWordAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteWordAddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteWordDelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteWordDelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteWordGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockword_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteWordGetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blockword_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blockword_proto_goTypes,
		DependencyIndexes: file_blockword_proto_depIdxs,
		MessageInfos:      file_blockword_proto_msgTypes,
	}.Build()
	File_blockword_proto = out.File
	file_blockword_proto_rawDesc = nil
	file_blockword_proto_goTypes = nil
	file_blockword_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessageRPCClient is the client API for MessageRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageRPCClient interface {
	Do(ctx context.Context, in *DoReq, opts ...grpc.CallOption) (*DoResp, error)
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
	Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelResp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	WhiteWordAdd(ctx context.Context, in *WhiteWordAddReq, opts ...grpc.CallOption) (*WhiteWordAddResp, error)
	WhiteWordDel(ctx context.Context, in *WhiteWordDelReq, opts ...grpc.CallOption) (*WhiteWordDelResp, error)
	WhiteWordGet(ctx context.Context, in *WhiteWordGetReq, opts ...grpc.CallOption) (*WhiteWordGetResp, error)
}

type messageRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageRPCClient(cc grpc.ClientConnInterface) MessageRPCClient {
	return &messageRPCClient{cc}
}

func (c *messageRPCClient) Do(ctx context.Context, in *DoReq, opts ...grpc.CallOption) (*DoResp, error) {
	out := new(DoResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelResp, error) {
	out := new(DelResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) WhiteWordAdd(ctx context.Context, in *WhiteWordAddReq, opts ...grpc.CallOption) (*WhiteWordAddResp, error) {
	out := new(WhiteWordAddResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/WhiteWordAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) WhiteWordDel(ctx context.Context, in *WhiteWordDelReq, opts ...grpc.CallOption) (*WhiteWordDelResp, error) {
	out := new(WhiteWordDelResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/WhiteWordDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRPCClient) WhiteWordGet(ctx context.Context, in *WhiteWordGetReq, opts ...grpc.CallOption) (*WhiteWordGetResp, error) {
	out := new(WhiteWordGetResp)
	err := c.cc.Invoke(ctx, "/pb.MessageRPC/WhiteWordGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageRPCServer is the server API for MessageRPC service.
type MessageRPCServer interface {
	Do(context.Context, *DoReq) (*DoResp, error)
	Add(context.Context, *AddReq) (*AddResp, error)
	Del(context.Context, *DelReq) (*DelResp, error)
	Get(context.Context, *GetReq) (*GetResp, error)
	WhiteWordAdd(context.Context, *WhiteWordAddReq) (*WhiteWordAddResp, error)
	WhiteWordDel(context.Context, *WhiteWordDelReq) (*WhiteWordDelResp, error)
	WhiteWordGet(context.Context, *WhiteWordGetReq) (*WhiteWordGetResp, error)
}

// UnimplementedMessageRPCServer can be embedded to have forward compatible implementations.
type UnimplementedMessageRPCServer struct {
}

func (*UnimplementedMessageRPCServer) Do(context.Context, *DoReq) (*DoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (*UnimplementedMessageRPCServer) Add(context.Context, *AddReq) (*AddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedMessageRPCServer) Del(context.Context, *DelReq) (*DelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedMessageRPCServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedMessageRPCServer) WhiteWordAdd(context.Context, *WhiteWordAddReq) (*WhiteWordAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteWordAdd not implemented")
}
func (*UnimplementedMessageRPCServer) WhiteWordDel(context.Context, *WhiteWordDelReq) (*WhiteWordDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteWordDel not implemented")
}
func (*UnimplementedMessageRPCServer) WhiteWordGet(context.Context, *WhiteWordGetReq) (*WhiteWordGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteWordGet not implemented")
}

func RegisterMessageRPCServer(s *grpc.Server, srv MessageRPCServer) {
	s.RegisterService(&_MessageRPC_serviceDesc, srv)
}

func _MessageRPC_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).Do(ctx, req.(*DoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).Del(ctx, req.(*DelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_WhiteWordAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteWordAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).WhiteWordAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/WhiteWordAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).WhiteWordAdd(ctx, req.(*WhiteWordAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_WhiteWordDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteWordDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).WhiteWordDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/WhiteWordDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).WhiteWordDel(ctx, req.(*WhiteWordDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRPC_WhiteWordGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteWordGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRPCServer).WhiteWordGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageRPC/WhiteWordGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRPCServer).WhiteWordGet(ctx, req.(*WhiteWordGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MessageRPC",
	HandlerType: (*MessageRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _MessageRPC_Do_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _MessageRPC_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _MessageRPC_Del_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MessageRPC_Get_Handler,
		},
		{
			MethodName: "WhiteWordAdd",
			Handler:    _MessageRPC_WhiteWordAdd_Handler,
		},
		{
			MethodName: "WhiteWordDel",
			Handler:    _MessageRPC_WhiteWordDel_Handler,
		},
		{
			MethodName: "WhiteWordGet",
			Handler:    _MessageRPC_WhiteWordGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockword.proto",
}
